---
description: how to migrate to the new evals interfaces
globs:
alwaysApply: false
---

## Evals Migration

The `arize-phoenix-evals` package consists of new interfaces and implementations for evals.

### New Interfaces

Here's a mapping of old interfaces to new ones:

| Old Interface                                  | New Interface                       |
| ---------------------------------------------- | ----------------------------------- |
| `from phoenix.evals.models import OpenAIModel` | `from.phoenix.evals.llm import LLM` |

### Examples

Old way:

```python
from phoenix.evals import llm_classify
from phoenix.evals.models import OpenAIModel
from phoenix.evals.templates import PromptTemplate

evals_df = llm_classify(
    data=spans_df,
    model=OpenAIModel(model="gpt-4o"),
    rails=["helpful", "not_helpful"],
    template=PromptTemplate(
        template="Is the response helpful?\n\nQuery: {input}\nResponse: {output}. Respond either as 'helpful' or 'not_helpful'",
    ),
    exit_on_error=False,
    provide_explanation=True,
)

## Assign 1 to helpful and 0 to not_helpful
evals_df["score"] = evals_df["label"].apply(lambda x: 1 if x == "helpful" else 0)
evals_df[["label", "score", "explanation"]].head()
```

New Way:

```python
import pandas as pd
from phoenix.evals import create_classifier, evaluate_dataframe
from phoenix.evals.llm import LLM

# Create an LLM instance
llm = LLM(provider="openai", model="gpt-4o")


helpfulness_evaluator = create_classifier(
    name="helpfulness",
    prompt_template="Is the response helpful?\n\nQuery: {input}\nResponse: {output}",
    llm=llm,
    choices={"helpful": 1.0, "not_helpful": 0.0},
)

# Prepare your dataframe
df = pd.DataFrame([
    {"input": "How do I reset my password?", "output": "Go to settings > account > reset password."},
    {"input": "What's the weather like?", "output": "I can help you with password resets."},
])

# Evaluate the dataframe
results_df = evaluate_dataframe(
    dataframe=df,
    evaluators=[relevance_evaluator, helpfulness_evaluator],
)

print(results_df.head())
```
