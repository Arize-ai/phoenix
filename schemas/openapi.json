{
  "openapi": "3.1.0",
  "info": {
    "title": "Arize-Phoenix REST API",
    "description": "Schema for Arize-Phoenix REST API",
    "version": "1.0"
  },
  "paths": {
    "/v1/annotation_configs": {
      "get": {
        "tags": [
          "annotation_configs"
        ],
        "summary": "List annotation configurations",
        "description": "Retrieve a paginated list of all annotation configurations in the system.",
        "operationId": "list_annotation_configs_v1_annotation_configs_get",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Cursor for pagination (base64-encoded annotation config ID)",
              "title": "Cursor"
            },
            "description": "Cursor for pagination (base64-encoded annotation config ID)"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Maximum number of configs to return",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of configs to return"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of annotation configurations with pagination information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAnnotationConfigsResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "annotation_configs"
        ],
        "summary": "Create an annotation configuration",
        "operationId": "create_annotation_config_v1_annotation_configs_post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnnotationConfigData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAnnotationConfigResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/annotation_configs/{config_identifier}": {
      "get": {
        "tags": [
          "annotation_configs"
        ],
        "summary": "Get an annotation configuration by ID or name",
        "operationId": "get_annotation_config_by_name_or_id_v1_annotation_configs__config_identifier__get",
        "parameters": [
          {
            "name": "config_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID or name of the annotation configuration",
              "title": "Config Identifier"
            },
            "description": "ID or name of the annotation configuration"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAnnotationConfigResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/annotation_configs/{config_id}": {
      "put": {
        "tags": [
          "annotation_configs"
        ],
        "summary": "Update an annotation configuration",
        "operationId": "update_annotation_config_v1_annotation_configs__config_id__put",
        "parameters": [
          {
            "name": "config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the annotation configuration",
              "title": "Config Id"
            },
            "description": "ID of the annotation configuration"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnnotationConfigData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAnnotationConfigResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "annotation_configs"
        ],
        "summary": "Delete an annotation configuration",
        "operationId": "delete_annotation_config_v1_annotation_configs__config_id__delete",
        "parameters": [
          {
            "name": "config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the annotation configuration",
              "title": "Config Id"
            },
            "description": "ID of the annotation configuration"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAnnotationConfigResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/projects/{project_identifier}/span_annotations": {
      "get": {
        "tags": [
          "annotations"
        ],
        "summary": "Get span annotations for a list of span_ids.",
        "operationId": "listSpanAnnotationsBySpanIds",
        "parameters": [
          {
            "name": "project_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The project identifier: either project ID or project name. If using a project name as the identifier, it cannot contain slash (/), question mark (?), or pound sign (#) characters.",
              "title": "Project Identifier"
            },
            "description": "The project identifier: either project ID or project name. If using a project name as the identifier, it cannot contain slash (/), question mark (?), or pound sign (#) characters."
          },
          {
            "name": "span_ids",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "minItems": 1,
              "description": "One or more span id to fetch annotations for",
              "title": "Span Ids"
            },
            "description": "One or more span id to fetch annotations for"
          },
          {
            "name": "include_annotation_names",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional list of annotation names to include. If provided, only annotations with these names will be returned. 'note' annotations are excluded by default unless explicitly included in this list.",
              "title": "Include Annotation Names"
            },
            "description": "Optional list of annotation names to include. If provided, only annotations with these names will be returned. 'note' annotations are excluded by default unless explicitly included in this list."
          },
          {
            "name": "exclude_annotation_names",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional list of annotation names to exclude from results.",
              "title": "Exclude Annotation Names"
            },
            "description": "Optional list of annotation names to exclude from results."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "A cursor for pagination",
              "title": "Cursor"
            },
            "description": "A cursor for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "exclusiveMinimum": 0,
              "description": "The maximum number of annotations to return in a single request",
              "default": 10,
              "title": "Limit"
            },
            "description": "The maximum number of annotations to return in a single request"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpanAnnotationsResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Project or spans not found"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Invalid parameters"
          }
        }
      }
    },
    "/v1/projects/{project_identifier}/trace_annotations": {
      "get": {
        "tags": [
          "annotations"
        ],
        "summary": "Get trace annotations for a list of trace_ids.",
        "operationId": "listTraceAnnotationsByTraceIds",
        "parameters": [
          {
            "name": "project_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The project identifier: either project ID or project name. If using a project name as the identifier, it cannot contain slash (/), question mark (?), or pound sign (#) characters.",
              "title": "Project Identifier"
            },
            "description": "The project identifier: either project ID or project name. If using a project name as the identifier, it cannot contain slash (/), question mark (?), or pound sign (#) characters."
          },
          {
            "name": "trace_ids",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "minItems": 1,
              "description": "One or more trace id to fetch annotations for",
              "title": "Trace Ids"
            },
            "description": "One or more trace id to fetch annotations for"
          },
          {
            "name": "include_annotation_names",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional list of annotation names to include. If provided, only annotations with these names will be returned. 'note' annotations are excluded by default unless explicitly included in this list.",
              "title": "Include Annotation Names"
            },
            "description": "Optional list of annotation names to include. If provided, only annotations with these names will be returned. 'note' annotations are excluded by default unless explicitly included in this list."
          },
          {
            "name": "exclude_annotation_names",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional list of annotation names to exclude from results.",
              "title": "Exclude Annotation Names"
            },
            "description": "Optional list of annotation names to exclude from results."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "A cursor for pagination",
              "title": "Cursor"
            },
            "description": "A cursor for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "exclusiveMinimum": 0,
              "description": "The maximum number of annotations to return in a single request",
              "default": 10,
              "title": "Limit"
            },
            "description": "The maximum number of annotations to return in a single request"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TraceAnnotationsResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Project or traces not found"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Invalid parameters"
          }
        }
      }
    },
    "/v1/projects/{project_identifier}/session_annotations": {
      "get": {
        "tags": [
          "annotations"
        ],
        "summary": "Get session annotations for a list of session_ids.",
        "operationId": "listSessionAnnotationsBySessionIds",
        "parameters": [
          {
            "name": "project_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The project identifier: either project ID or project name. If using a project name as the identifier, it cannot contain slash (/), question mark (?), or pound sign (#) characters.",
              "title": "Project Identifier"
            },
            "description": "The project identifier: either project ID or project name. If using a project name as the identifier, it cannot contain slash (/), question mark (?), or pound sign (#) characters."
          },
          {
            "name": "session_ids",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "minItems": 1,
              "description": "One or more session id to fetch annotations for",
              "title": "Session Ids"
            },
            "description": "One or more session id to fetch annotations for"
          },
          {
            "name": "include_annotation_names",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional list of annotation names to include. If provided, only annotations with these names will be returned. 'note' annotations are excluded by default unless explicitly included in this list.",
              "title": "Include Annotation Names"
            },
            "description": "Optional list of annotation names to include. If provided, only annotations with these names will be returned. 'note' annotations are excluded by default unless explicitly included in this list."
          },
          {
            "name": "exclude_annotation_names",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional list of annotation names to exclude from results.",
              "title": "Exclude Annotation Names"
            },
            "description": "Optional list of annotation names to exclude from results."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "A cursor for pagination",
              "title": "Cursor"
            },
            "description": "A cursor for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "exclusiveMinimum": 0,
              "description": "The maximum number of annotations to return in a single request",
              "default": 10,
              "title": "Limit"
            },
            "description": "The maximum number of annotations to return in a single request"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionAnnotationsResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Project or sessions not found"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Invalid parameters"
          }
        }
      }
    },
    "/v1/datasets": {
      "get": {
        "tags": [
          "datasets"
        ],
        "summary": "List datasets",
        "operationId": "listDatasets",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Cursor for pagination",
              "title": "Cursor"
            },
            "description": "Cursor for pagination"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "An optional dataset name to filter by",
              "title": "Name"
            },
            "description": "An optional dataset name to filter by"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "The max number of datasets to return at a time.",
              "default": 10,
              "title": "Limit"
            },
            "description": "The max number of datasets to return at a time."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDatasetsResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/v1/datasets/{id}": {
      "delete": {
        "tags": [
          "datasets"
        ],
        "summary": "Delete dataset by ID",
        "operationId": "deleteDatasetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the dataset to delete.",
              "title": "Id"
            },
            "description": "The ID of the dataset to delete."
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Dataset not found"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Invalid dataset ID"
          }
        }
      },
      "get": {
        "tags": [
          "datasets"
        ],
        "summary": "Get dataset by ID",
        "operationId": "getDataset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the dataset",
              "title": "Id"
            },
            "description": "The ID of the dataset"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDatasetResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/datasets/{id}/versions": {
      "get": {
        "tags": [
          "datasets"
        ],
        "summary": "List dataset versions",
        "operationId": "listDatasetVersionsByDatasetId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the dataset",
              "title": "Id"
            },
            "description": "The ID of the dataset"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Cursor for pagination",
              "title": "Cursor"
            },
            "description": "Cursor for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "The max number of dataset versions to return at a time",
              "default": 10,
              "title": "Limit"
            },
            "description": "The max number of dataset versions to return at a time"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDatasetVersionsResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/v1/datasets/upload": {
      "post": {
        "tags": [
          "datasets"
        ],
        "summary": "Upload dataset from JSON, CSV, or PyArrow",
        "operationId": "uploadDataset",
        "parameters": [
          {
            "name": "sync",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "If true, fulfill request synchronously and return JSON containing dataset_id.",
              "default": false,
              "title": "Sync"
            },
            "description": "If true, fulfill request synchronously and return JSON containing dataset_id."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/UploadDatasetResponseBody"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "title": "Response Uploaddataset"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Dataset of the same name already exists"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Invalid request body"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "inputs"
                ],
                "properties": {
                  "action": {
                    "type": "string",
                    "enum": [
                      "create",
                      "append"
                    ]
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  },
                  "outputs": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  },
                  "metadata": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  }
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "input_keys[]",
                  "output_keys[]",
                  "file"
                ],
                "properties": {
                  "action": {
                    "type": "string",
                    "enum": [
                      "create",
                      "append"
                    ]
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "input_keys[]": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "uniqueItems": true
                  },
                  "output_keys[]": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "uniqueItems": true
                  },
                  "metadata_keys[]": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "uniqueItems": true
                  },
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/datasets/{id}/examples": {
      "get": {
        "tags": [
          "datasets"
        ],
        "summary": "Get examples from a dataset",
        "operationId": "getDatasetExamples",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the dataset",
              "title": "Id"
            },
            "description": "The ID of the dataset"
          },
          {
            "name": "version_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the dataset version (if omitted, returns data from the latest version)",
              "title": "Version Id"
            },
            "description": "The ID of the dataset version (if omitted, returns data from the latest version)"
          },
          {
            "name": "splits",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "The names of the dataset splits to filter by",
              "title": "Splits"
            },
            "description": "The names of the dataset splits to filter by"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDatasetExamplesResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "datasets"
        ],
        "summary": "Patch dataset examples by setting their splits",
        "description": "Set splits for dataset examples.\n\nIf example_ids is provided, only those examples will be updated.\nIf example_ids is None/empty, all examples in the dataset will be updated.",
        "operationId": "patchDatasetExamples",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the dataset",
              "title": "Id"
            },
            "description": "The ID of the dataset"
          },
          {
            "name": "example_ids",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "The IDs of specific examples to patch. If not provided, all examples in the dataset will be updated.",
              "title": "Example Ids"
            },
            "description": "The IDs of specific examples to patch. If not provided, all examples in the dataset will be updated."
          },
          {
            "name": "splits",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "The names of the dataset splits to set on the examples",
              "title": "Splits"
            },
            "description": "The names of the dataset splits to set on the examples"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not Found"
          },
          "400": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/datasets/{id}/csv": {
      "get": {
        "tags": [
          "datasets"
        ],
        "summary": "Download dataset examples as CSV file",
        "operationId": "getDatasetCsv",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the dataset",
              "title": "Id"
            },
            "description": "The ID of the dataset"
          },
          {
            "name": "version_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the dataset version (if omitted, returns data from the latest version)",
              "title": "Version Id"
            },
            "description": "The ID of the dataset version (if omitted, returns data from the latest version)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "contentMediaType": "text/csv"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/v1/datasets/{id}/jsonl/openai_ft": {
      "get": {
        "tags": [
          "datasets"
        ],
        "summary": "Download dataset examples as OpenAI fine-tuning JSONL file",
        "operationId": "getDatasetJSONLOpenAIFineTuning",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the dataset",
              "title": "Id"
            },
            "description": "The ID of the dataset"
          },
          {
            "name": "version_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the dataset version (if omitted, returns data from the latest version)",
              "title": "Version Id"
            },
            "description": "The ID of the dataset version (if omitted, returns data from the latest version)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Invalid dataset or version ID"
          }
        }
      }
    },
    "/v1/datasets/{id}/jsonl/openai_evals": {
      "get": {
        "tags": [
          "datasets"
        ],
        "summary": "Download dataset examples as OpenAI evals JSONL file",
        "operationId": "getDatasetJSONLOpenAIEvals",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the dataset",
              "title": "Id"
            },
            "description": "The ID of the dataset"
          },
          {
            "name": "version_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The ID of the dataset version (if omitted, returns data from the latest version)",
              "title": "Version Id"
            },
            "description": "The ID of the dataset version (if omitted, returns data from the latest version)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Invalid dataset or version ID"
          }
        }
      }
    },
    "/v1/datasets/{dataset_id}/experiments": {
      "post": {
        "tags": [
          "experiments"
        ],
        "summary": "Create experiment on a dataset",
        "operationId": "createExperiment",
        "parameters": [
          {
            "name": "dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Dataset ID"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExperimentRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Experiment retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateExperimentResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Dataset or DatasetVersion not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "experiments"
        ],
        "summary": "List experiments by dataset",
        "operationId": "listExperiments",
        "parameters": [
          {
            "name": "dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Dataset ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Experiments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListExperimentsResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/experiments/{experiment_id}": {
      "get": {
        "tags": [
          "experiments"
        ],
        "summary": "Get experiment by ID",
        "operationId": "getExperiment",
        "parameters": [
          {
            "name": "experiment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Experiment Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Experiment retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetExperimentResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Experiment not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/experiments/{experiment_id}/json": {
      "get": {
        "tags": [
          "experiments"
        ],
        "summary": "Download experiment runs as a JSON file",
        "operationId": "getExperimentJSON",
        "parameters": [
          {
            "name": "experiment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Experiment ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Experiment not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/experiments/{experiment_id}/csv": {
      "get": {
        "tags": [
          "experiments"
        ],
        "summary": "Download experiment runs as a CSV file",
        "operationId": "getExperimentCSV",
        "parameters": [
          {
            "name": "experiment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Experiment ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              },
              "text/csv": {
                "schema": {
                  "type": "string",
                  "contentMediaType": "text/csv"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/experiments/{experiment_id}/runs": {
      "post": {
        "tags": [
          "experiments"
        ],
        "summary": "Create run for an experiment",
        "operationId": "createExperimentRun",
        "parameters": [
          {
            "name": "experiment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Experiment Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExperimentRunRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Experiment run created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateExperimentRunResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Experiment or dataset example not found"
          },
          "409": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "This experiment run has already been submitted"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "experiments"
        ],
        "summary": "List runs for an experiment",
        "description": "Retrieve a paginated list of runs for an experiment",
        "operationId": "listExperimentRuns",
        "parameters": [
          {
            "name": "experiment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Experiment Id"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Cursor for pagination (base64-encoded experiment run ID)",
              "title": "Cursor"
            },
            "description": "Cursor for pagination (base64-encoded experiment run ID)"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "exclusiveMinimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "description": "The max number of experiment runs to return at a time. If not specified, returns all results.",
              "title": "Limit"
            },
            "description": "The max number of experiment runs to return at a time. If not specified, returns all results."
          }
        ],
        "responses": {
          "200": {
            "description": "Experiment runs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListExperimentRunsResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Experiment not found"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Invalid cursor format"
          }
        }
      }
    },
    "/v1/experiment_evaluations": {
      "post": {
        "tags": [
          "experiments"
        ],
        "summary": "Create or update evaluation for an experiment run",
        "operationId": "upsertExperimentEvaluation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertExperimentEvaluationRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertExperimentEvaluationResponseBody"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Experiment run not found",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/trace_annotations": {
      "post": {
        "tags": [
          "traces"
        ],
        "summary": "Create trace annotations",
        "operationId": "annotateTraces",
        "parameters": [
          {
            "name": "sync",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "If true, fulfill request synchronously.",
              "default": false,
              "title": "Sync"
            },
            "description": "If true, fulfill request synchronously."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnnotateTracesRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnotateTracesResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Trace not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/traces/{trace_identifier}": {
      "delete": {
        "tags": [
          "traces"
        ],
        "summary": "Delete a trace by identifier",
        "description": "Delete an entire trace by its identifier. The identifier can be either:\n1. A Relay node ID (base64-encoded)\n2. An OpenTelemetry trace_id (hex string)\n\nThis will permanently remove all spans in the trace and their associated data.",
        "operationId": "deleteTrace",
        "parameters": [
          {
            "name": "trace_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The trace identifier: either a relay GlobalID or OpenTelemetry trace_id",
              "title": "Trace Identifier"
            },
            "description": "The trace identifier: either a relay GlobalID or OpenTelemetry trace_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/projects/{project_identifier}/spans/otlpv1": {
      "get": {
        "tags": [
          "spans"
        ],
        "summary": "Search spans with simple filters (no DSL)",
        "description": "Return spans within a project filtered by time range. Supports cursor-based pagination.",
        "operationId": "spanSearch",
        "parameters": [
          {
            "name": "project_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The project identifier: either project ID or project name. If using a project name, it cannot contain slash (/), question mark (?), or pound sign (#) characters.",
              "title": "Project Identifier"
            },
            "description": "The project identifier: either project ID or project name. If using a project name, it cannot contain slash (/), question mark (?), or pound sign (#) characters."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Pagination cursor (Span Global ID)",
              "title": "Cursor"
            },
            "description": "Pagination cursor (Span Global ID)"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "exclusiveMinimum": 0,
              "description": "Maximum number of spans to return",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of spans to return"
          },
          {
            "name": "start_time",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Inclusive lower bound time",
              "title": "Start Time"
            },
            "description": "Inclusive lower bound time"
          },
          {
            "name": "end_time",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Exclusive upper bound time",
              "title": "End Time"
            },
            "description": "Exclusive upper bound time"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OtlpSpansResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/v1/projects/{project_identifier}/spans": {
      "get": {
        "tags": [
          "spans"
        ],
        "summary": "List spans with simple filters (no DSL)",
        "description": "Return spans within a project filtered by time range. Supports cursor-based pagination.",
        "operationId": "getSpans",
        "parameters": [
          {
            "name": "project_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The project identifier: either project ID or project name. If using a project name, it cannot contain slash (/), question mark (?), or pound sign (#) characters.",
              "title": "Project Identifier"
            },
            "description": "The project identifier: either project ID or project name. If using a project name, it cannot contain slash (/), question mark (?), or pound sign (#) characters."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Pagination cursor (Span Global ID)",
              "title": "Cursor"
            },
            "description": "Pagination cursor (Span Global ID)"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "exclusiveMinimum": 0,
              "description": "Maximum number of spans to return",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of spans to return"
          },
          {
            "name": "start_time",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Inclusive lower bound time",
              "title": "Start Time"
            },
            "description": "Inclusive lower bound time"
          },
          {
            "name": "end_time",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Exclusive upper bound time",
              "title": "End Time"
            },
            "description": "Exclusive upper bound time"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpansResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      },
      "post": {
        "tags": [
          "spans"
        ],
        "summary": "Create spans",
        "description": "Submit spans to be inserted into a project. If any spans are invalid or duplicates, no spans will be inserted.",
        "operationId": "createSpans",
        "parameters": [
          {
            "name": "project_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The project identifier: either project ID or project name. If using a project name, it cannot contain slash (/), question mark (?), or pound sign (#) characters.",
              "title": "Project Identifier"
            },
            "description": "The project identifier: either project ID or project name. If using a project name, it cannot contain slash (/), question mark (?), or pound sign (#) characters."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSpansRequestBody"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSpansResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not Found"
          },
          "400": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/span_annotations": {
      "post": {
        "tags": [
          "spans"
        ],
        "summary": "Create span annotations",
        "operationId": "annotateSpans",
        "parameters": [
          {
            "name": "sync",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "If true, fulfill request synchronously.",
              "default": false,
              "title": "Sync"
            },
            "description": "If true, fulfill request synchronously."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnnotateSpansRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Span annotations inserted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnotateSpansResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Span not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/spans/{span_identifier}": {
      "delete": {
        "tags": [
          "spans"
        ],
        "summary": "Delete a span by span_identifier",
        "description": "Delete a single span by identifier.\n\n        **Important**: This operation deletes ONLY the specified span itself and does NOT\n        delete its descendants/children. All child spans will remain in the trace and\n        become orphaned (their parent_id will point to a non-existent span).\n\n        Behavior:\n        - Deletes only the target span (preserves all descendant spans)\n        - If this was the last span in the trace, the trace record is also deleted\n        - If the deleted span had a parent, its cumulative metrics (error count, token counts)\n          are subtracted from all ancestor spans in the chain\n\n        **Note**: This operation is irreversible and may create orphaned spans.",
        "operationId": "deleteSpan",
        "parameters": [
          {
            "name": "span_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The span identifier: either a relay GlobalID or OpenTelemetry span_id",
              "title": "Span Identifier"
            },
            "description": "The span identifier: either a relay GlobalID or OpenTelemetry span_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/evaluations": {
      "post": {
        "tags": [
          "traces"
        ],
        "summary": "Add span, trace, or document evaluations",
        "operationId": "addEvaluations",
        "parameters": [
          {
            "name": "content-type",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Content-Type"
            }
          },
          {
            "name": "content-encoding",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Content-Encoding"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "415": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unsupported content type, only gzipped protobuf and pandas-arrow are supported"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/x-protobuf": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "application/x-pandas-arrow": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "traces"
        ],
        "summary": "Get span, trace, or document evaluations from a project",
        "operationId": "getEvaluations",
        "parameters": [
          {
            "name": "project_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The name of the project to get evaluations from (if omitted, evaluations will be drawn from the `default` project)",
              "title": "Project Name"
            },
            "description": "The name of the project to get evaluations from (if omitted, evaluations will be drawn from the `default` project)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/prompts": {
      "get": {
        "tags": [
          "prompts"
        ],
        "summary": "List all prompts",
        "description": "Retrieve a paginated list of all prompts in the system. A prompt can have multiple versions.",
        "operationId": "getPrompts",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Cursor for pagination (base64-encoded prompt ID)",
              "title": "Cursor"
            },
            "description": "Cursor for pagination (base64-encoded prompt ID)"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "The max number of prompts to return at a time.",
              "default": 100,
              "title": "Limit"
            },
            "description": "The max number of prompts to return at a time."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of prompts with pagination information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPromptsResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      },
      "post": {
        "tags": [
          "prompts"
        ],
        "summary": "Create a new prompt",
        "description": "Create a new prompt and its initial version. A prompt can have multiple versions.",
        "operationId": "postPromptVersion",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePromptRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The newly created prompt version",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/v1/prompts/{prompt_identifier}/versions": {
      "get": {
        "tags": [
          "prompts"
        ],
        "summary": "List prompt versions",
        "description": "Retrieve all versions of a specific prompt with pagination support. Each prompt can have multiple versions with different configurations.",
        "operationId": "listPromptVersions",
        "parameters": [
          {
            "name": "prompt_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the prompt, i.e. name or ID.",
              "title": "Prompt Identifier"
            },
            "description": "The identifier of the prompt, i.e. name or ID."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Cursor for pagination (base64-encoded promptVersion ID)",
              "title": "Cursor"
            },
            "description": "Cursor for pagination (base64-encoded promptVersion ID)"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "The max number of prompt versions to return at a time.",
              "default": 100,
              "title": "Limit"
            },
            "description": "The max number of prompt versions to return at a time."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of prompt versions with pagination information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPromptVersionsResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not Found"
          }
        }
      }
    },
    "/v1/prompt_versions/{prompt_version_id}": {
      "get": {
        "tags": [
          "prompts"
        ],
        "summary": "Get prompt version by ID",
        "description": "Retrieve a specific prompt version using its unique identifier. A prompt version contains the actual template and configuration.",
        "operationId": "getPromptVersionByPromptVersionId",
        "parameters": [
          {
            "name": "prompt_version_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the prompt version.",
              "title": "Prompt Version Id"
            },
            "description": "The ID of the prompt version."
          }
        ],
        "responses": {
          "200": {
            "description": "The requested prompt version",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPromptResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/v1/prompts/{prompt_identifier}/tags/{tag_name}": {
      "get": {
        "tags": [
          "prompts"
        ],
        "summary": "Get prompt version by tag",
        "description": "Retrieve a specific prompt version using its tag name. Tags are used to identify specific versions of a prompt.",
        "operationId": "getPromptVersionByTagName",
        "parameters": [
          {
            "name": "prompt_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the prompt, i.e. name or ID.",
              "title": "Prompt Identifier"
            },
            "description": "The identifier of the prompt, i.e. name or ID."
          },
          {
            "name": "tag_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The tag of the prompt version",
              "title": "Tag Name"
            },
            "description": "The tag of the prompt version"
          }
        ],
        "responses": {
          "200": {
            "description": "The prompt version with the specified tag",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPromptResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/v1/prompts/{prompt_identifier}/latest": {
      "get": {
        "tags": [
          "prompts"
        ],
        "summary": "Get latest prompt version",
        "description": "Retrieve the most recent version of a specific prompt.",
        "operationId": "getPromptVersionLatest",
        "parameters": [
          {
            "name": "prompt_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the prompt, i.e. name or ID.",
              "title": "Prompt Identifier"
            },
            "description": "The identifier of the prompt, i.e. name or ID."
          }
        ],
        "responses": {
          "200": {
            "description": "The latest version of the specified prompt",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPromptResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/v1/prompt_versions/{prompt_version_id}/tags": {
      "get": {
        "tags": [
          "prompts"
        ],
        "summary": "List prompt version tags",
        "description": "Retrieve all tags associated with a specific prompt version. Tags are used to identify and categorize different versions of a prompt.",
        "operationId": "getPromptVersionTags",
        "parameters": [
          {
            "name": "prompt_version_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the prompt version.",
              "title": "Prompt Version Id"
            },
            "description": "The ID of the prompt version."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Cursor for pagination (base64-encoded promptVersionTag ID)",
              "title": "Cursor"
            },
            "description": "Cursor for pagination (base64-encoded promptVersionTag ID)"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "The max number of tags to return at a time.",
              "default": 100,
              "title": "Limit"
            },
            "description": "The max number of tags to return at a time."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of tags associated with the prompt version",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPromptVersionTagsResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      },
      "post": {
        "tags": [
          "prompts"
        ],
        "summary": "Add tag to prompt version",
        "description": "Add a new tag to a specific prompt version. Tags help identify and categorize different versions of a prompt.",
        "operationId": "createPromptVersionTag",
        "parameters": [
          {
            "name": "prompt_version_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the prompt version.",
              "title": "Prompt Version Id"
            },
            "description": "The ID of the prompt version."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromptVersionTagData"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content returned on successful tag creation"
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/v1/projects": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "List all projects",
        "description": "Retrieve a paginated list of all projects in the system.",
        "operationId": "getProjects",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Cursor for pagination (project ID)",
              "title": "Cursor"
            },
            "description": "Cursor for pagination (project ID)"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "The max number of projects to return at a time.",
              "default": 100,
              "title": "Limit"
            },
            "description": "The max number of projects to return at a time."
          },
          {
            "name": "include_experiment_projects",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include experiment projects in the response. Experiment projects are created from running experiments.",
              "default": false,
              "title": "Include Experiment Projects"
            },
            "description": "Include experiment projects in the response. Experiment projects are created from running experiments."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of projects with pagination information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProjectsResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Create a new project",
        "description": "Create a new project with the specified configuration.",
        "operationId": "createProject",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The newly created project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProjectResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/v1/projects/{project_identifier}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get project by ID or name",
        "description": "Retrieve a specific project using its unique identifier: either project ID or project name. Note: When using a project name as the identifier, it cannot contain slash (/), question mark (?), or pound sign (#) characters.",
        "operationId": "getProject",
        "parameters": [
          {
            "name": "project_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The project identifier: either project ID or project name. If using a project name, it cannot contain slash (/), question mark (?), or pound sign (#) characters.",
              "title": "Project Identifier"
            },
            "description": "The project identifier: either project ID or project name. If using a project name, it cannot contain slash (/), question mark (?), or pound sign (#) characters."
          }
        ],
        "responses": {
          "200": {
            "description": "The requested project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProjectResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      },
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Update a project by ID or name",
        "description": "Update an existing project with new configuration. Project names cannot be changed. The project identifier is either project ID or project name. Note: When using a project name as the identifier, it cannot contain slash (/), question mark (?), or pound sign (#) characters.",
        "operationId": "updateProject",
        "parameters": [
          {
            "name": "project_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The project identifier: either project ID or project name. If using a project name, it cannot contain slash (/), question mark (?), or pound sign (#) characters.",
              "title": "Project Identifier"
            },
            "description": "The project identifier: either project ID or project name. If using a project name, it cannot contain slash (/), question mark (?), or pound sign (#) characters."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateProjectResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete a project by ID or name",
        "description": "Delete an existing project and all its associated data. The project identifier is either project ID or project name. The default project cannot be deleted. Note: When using a project name as the identifier, it cannot contain slash (/), question mark (?), or pound sign (#) characters.",
        "operationId": "deleteProject",
        "parameters": [
          {
            "name": "project_identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The project identifier: either project ID or project name. If using a project name, it cannot contain slash (/), question mark (?), or pound sign (#) characters.",
              "title": "Project Identifier"
            },
            "description": "The project identifier: either project ID or project name. If using a project name, it cannot contain slash (/), question mark (?), or pound sign (#) characters."
          }
        ],
        "responses": {
          "204": {
            "description": "No content returned on successful deletion"
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/v1/session_annotations": {
      "post": {
        "tags": [
          "sessions"
        ],
        "summary": "Create session annotations",
        "operationId": "annotateSessions",
        "parameters": [
          {
            "name": "sync",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "If true, fulfill request synchronously.",
              "default": false,
              "title": "Sync"
            },
            "description": "If true, fulfill request synchronously."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnnotateSessionsRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Session annotations inserted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnotateSessionsResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Session not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/document_annotations": {
      "post": {
        "tags": [
          "spans"
        ],
        "summary": "Annotate Span Documents",
        "operationId": "annotateSpanDocuments",
        "parameters": [
          {
            "name": "sync",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "If set to true, the annotations are inserted synchronously.",
              "default": false,
              "title": "Sync"
            },
            "description": "If set to true, the annotations are inserted synchronously."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnnotateSpanDocumentsRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Span document annotation inserted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnotateSpanDocumentsResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Span not found"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Invalid request - non-empty identifier not supported"
          }
        }
      }
    },
    "/v1/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "List all users",
        "description": "Retrieve a paginated list of all users in the system.",
        "operationId": "getUsers",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Cursor for pagination (base64-encoded user ID)",
              "title": "Cursor"
            },
            "description": "Cursor for pagination (base64-encoded user ID)"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "The max number of users to return at a time.",
              "default": 100,
              "title": "Limit"
            },
            "description": "The max number of users to return at a time."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUsersResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create a new user",
        "description": "Create a new user with the specified configuration.",
        "operationId": "createUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The newly created user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserResponseBody"
                }
              }
            }
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "400": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Role not found."
          },
          "409": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Username or email already exists."
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/v1/users/{user_id}": {
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete a user by ID",
        "description": "Delete an existing user by their unique GlobalID.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The GlobalID of the user (e.g. 'VXNlcjox').",
              "title": "User Id"
            },
            "description": "The GlobalID of the user (e.g. 'VXNlcjox')."
          }
        ],
        "responses": {
          "204": {
            "description": "No content returned on successful deletion."
          },
          "403": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Cannot delete the default admin or system user"
          },
          "404": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "User not found."
          },
          "422": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AnnotateSessionsRequestBody": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/SessionAnnotationData"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "AnnotateSessionsRequestBody"
      },
      "AnnotateSessionsResponseBody": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/InsertedSessionAnnotation"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "AnnotateSessionsResponseBody"
      },
      "AnnotateSpanDocumentsRequestBody": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/SpanDocumentAnnotationData"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "AnnotateSpanDocumentsRequestBody"
      },
      "AnnotateSpanDocumentsResponseBody": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/InsertedSpanDocumentAnnotation"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "AnnotateSpanDocumentsResponseBody"
      },
      "AnnotateSpansRequestBody": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/SpanAnnotationData"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "AnnotateSpansRequestBody"
      },
      "AnnotateSpansResponseBody": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/InsertedSpanAnnotation"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "AnnotateSpansResponseBody"
      },
      "AnnotateTracesRequestBody": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/TraceAnnotationData"
            },
            "type": "array",
            "title": "Data",
            "description": "The trace annotations to be upserted"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "AnnotateTracesRequestBody"
      },
      "AnnotateTracesResponseBody": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/InsertedTraceAnnotation"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "AnnotateTracesResponseBody"
      },
      "AnnotationResult": {
        "properties": {
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "The label assigned by the annotation"
          },
          "score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Score",
            "description": "The score assigned by the annotation"
          },
          "explanation": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Explanation",
            "description": "Explanation of the annotation result"
          }
        },
        "type": "object",
        "title": "AnnotationResult"
      },
      "CategoricalAnnotationConfig": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "type": "string",
            "const": "CATEGORICAL",
            "title": "Type"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "optimization_direction": {
            "$ref": "#/components/schemas/OptimizationDirection"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/CategoricalAnnotationValue"
            },
            "type": "array",
            "title": "Values"
          },
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type",
          "optimization_direction",
          "values",
          "id"
        ],
        "title": "CategoricalAnnotationConfig"
      },
      "CategoricalAnnotationConfigData": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "type": "string",
            "const": "CATEGORICAL",
            "title": "Type"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "optimization_direction": {
            "$ref": "#/components/schemas/OptimizationDirection"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/CategoricalAnnotationValue"
            },
            "type": "array",
            "title": "Values"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type",
          "optimization_direction",
          "values"
        ],
        "title": "CategoricalAnnotationConfigData"
      },
      "CategoricalAnnotationValue": {
        "properties": {
          "label": {
            "type": "string",
            "title": "Label"
          },
          "score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Score"
          }
        },
        "type": "object",
        "required": [
          "label"
        ],
        "title": "CategoricalAnnotationValue"
      },
      "ContinuousAnnotationConfig": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "type": "string",
            "const": "CONTINUOUS",
            "title": "Type"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "optimization_direction": {
            "$ref": "#/components/schemas/OptimizationDirection"
          },
          "lower_bound": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Lower Bound"
          },
          "upper_bound": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Upper Bound"
          },
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type",
          "optimization_direction",
          "id"
        ],
        "title": "ContinuousAnnotationConfig"
      },
      "ContinuousAnnotationConfigData": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "type": "string",
            "const": "CONTINUOUS",
            "title": "Type"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "optimization_direction": {
            "$ref": "#/components/schemas/OptimizationDirection"
          },
          "lower_bound": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Lower Bound"
          },
          "upper_bound": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Upper Bound"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type",
          "optimization_direction"
        ],
        "title": "ContinuousAnnotationConfigData"
      },
      "CreateAnnotationConfigData": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CategoricalAnnotationConfigData"
          },
          {
            "$ref": "#/components/schemas/ContinuousAnnotationConfigData"
          },
          {
            "$ref": "#/components/schemas/FreeformAnnotationConfigData"
          }
        ],
        "title": "CreateAnnotationConfigData",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "CATEGORICAL": "#/components/schemas/CategoricalAnnotationConfigData",
            "CONTINUOUS": "#/components/schemas/ContinuousAnnotationConfigData",
            "FREEFORM": "#/components/schemas/FreeformAnnotationConfigData"
          }
        }
      },
      "CreateAnnotationConfigResponseBody": {
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CategoricalAnnotationConfig"
              },
              {
                "$ref": "#/components/schemas/ContinuousAnnotationConfig"
              },
              {
                "$ref": "#/components/schemas/FreeformAnnotationConfig"
              }
            ],
            "title": "Data",
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "CATEGORICAL": "#/components/schemas/CategoricalAnnotationConfig",
                "CONTINUOUS": "#/components/schemas/ContinuousAnnotationConfig",
                "FREEFORM": "#/components/schemas/FreeformAnnotationConfig"
              }
            }
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "CreateAnnotationConfigResponseBody"
      },
      "CreateExperimentRequestBody": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Name of the experiment (if omitted, a random name will be generated)"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "An optional description of the experiment"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Metadata for the experiment"
          },
          "version_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version Id",
            "description": "ID of the dataset version over which the experiment will be run (if omitted, the latest version will be used)"
          },
          "split_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Split Ids",
            "description": "List of dataset split names to filter by"
          },
          "repetitions": {
            "type": "integer",
            "title": "Repetitions",
            "description": "Number of times the experiment should be repeated for each example",
            "default": 1
          }
        },
        "type": "object",
        "title": "CreateExperimentRequestBody",
        "description": "Details of the experiment to be created"
      },
      "CreateExperimentResponseBody": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Experiment"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "CreateExperimentResponseBody"
      },
      "CreateExperimentRunRequestBody": {
        "properties": {
          "dataset_example_id": {
            "type": "string",
            "title": "Dataset Example Id",
            "description": "The ID of the dataset example used in the experiment run"
          },
          "output": {
            "title": "Output",
            "description": "The output of the experiment task"
          },
          "repetition_number": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Repetition Number",
            "description": "The repetition number of the experiment run"
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start Time",
            "description": "The start time of the experiment run"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "title": "End Time",
            "description": "The end time of the experiment run"
          },
          "trace_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Trace Id",
            "description": "The ID of the corresponding trace (if one exists)"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error",
            "description": "Optional error message if the experiment run encountered an error"
          }
        },
        "type": "object",
        "required": [
          "dataset_example_id",
          "output",
          "repetition_number",
          "start_time",
          "end_time"
        ],
        "title": "CreateExperimentRunRequestBody"
      },
      "CreateExperimentRunResponseBody": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CreateExperimentRunResponseBodyData"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "CreateExperimentRunResponseBody"
      },
      "CreateExperimentRunResponseBodyData": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The ID of the newly created experiment run"
          }
        },
        "type": "object",
        "required": [
          "id"
        ],
        "title": "CreateExperimentRunResponseBodyData"
      },
      "CreateProjectRequestBody": {
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "CreateProjectRequestBody"
      },
      "CreateProjectResponseBody": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Project"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "CreateProjectResponseBody"
      },
      "CreatePromptRequestBody": {
        "properties": {
          "prompt": {
            "$ref": "#/components/schemas/PromptData"
          },
          "version": {
            "$ref": "#/components/schemas/PromptVersionData"
          }
        },
        "type": "object",
        "required": [
          "prompt",
          "version"
        ],
        "title": "CreatePromptRequestBody"
      },
      "CreatePromptResponseBody": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PromptVersion"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "CreatePromptResponseBody"
      },
      "CreateSpansRequestBody": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Span"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "CreateSpansRequestBody"
      },
      "CreateSpansResponseBody": {
        "properties": {
          "total_received": {
            "type": "integer",
            "title": "Total Received",
            "description": "Total number of spans received"
          },
          "total_queued": {
            "type": "integer",
            "title": "Total Queued",
            "description": "Number of spans successfully queued for insertion"
          }
        },
        "type": "object",
        "required": [
          "total_received",
          "total_queued"
        ],
        "title": "CreateSpansResponseBody"
      },
      "CreateUserRequestBody": {
        "properties": {
          "user": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/LocalUserData"
              },
              {
                "$ref": "#/components/schemas/OAuth2UserData"
              }
            ],
            "title": "User",
            "discriminator": {
              "propertyName": "auth_method",
              "mapping": {
                "LOCAL": "#/components/schemas/LocalUserData",
                "OAUTH2": "#/components/schemas/OAuth2UserData"
              }
            }
          },
          "send_welcome_email": {
            "type": "boolean",
            "title": "Send Welcome Email",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "user"
        ],
        "title": "CreateUserRequestBody"
      },
      "CreateUserResponseBody": {
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/LocalUser"
              },
              {
                "$ref": "#/components/schemas/OAuth2User"
              }
            ],
            "title": "Data",
            "discriminator": {
              "propertyName": "auth_method",
              "mapping": {
                "LOCAL": "#/components/schemas/LocalUser",
                "OAUTH2": "#/components/schemas/OAuth2User"
              }
            }
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "CreateUserResponseBody"
      },
      "Dataset": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Metadata"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "example_count": {
            "type": "integer",
            "title": "Example Count"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "metadata",
          "created_at",
          "updated_at",
          "example_count"
        ],
        "title": "Dataset"
      },
      "DatasetExample": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "input": {
            "additionalProperties": true,
            "type": "object",
            "title": "Input"
          },
          "output": {
            "additionalProperties": true,
            "type": "object",
            "title": "Output"
          },
          "metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Metadata"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "split_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Split Ids"
          }
        },
        "type": "object",
        "required": [
          "id",
          "input",
          "output",
          "metadata",
          "updated_at",
          "split_ids"
        ],
        "title": "DatasetExample"
      },
      "DatasetVersion": {
        "properties": {
          "version_id": {
            "type": "string",
            "title": "Version Id"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Metadata"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "version_id",
          "description",
          "metadata",
          "created_at"
        ],
        "title": "DatasetVersion"
      },
      "DatasetWithExampleCount": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Metadata"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "example_count": {
            "type": "integer",
            "title": "Example Count"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "metadata",
          "created_at",
          "updated_at",
          "example_count"
        ],
        "title": "DatasetWithExampleCount"
      },
      "DeleteAnnotationConfigResponseBody": {
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CategoricalAnnotationConfig"
              },
              {
                "$ref": "#/components/schemas/ContinuousAnnotationConfig"
              },
              {
                "$ref": "#/components/schemas/FreeformAnnotationConfig"
              }
            ],
            "title": "Data",
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "CATEGORICAL": "#/components/schemas/CategoricalAnnotationConfig",
                "CONTINUOUS": "#/components/schemas/ContinuousAnnotationConfig",
                "FREEFORM": "#/components/schemas/FreeformAnnotationConfig"
              }
            }
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "DeleteAnnotationConfigResponseBody"
      },
      "Experiment": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The ID of the experiment"
          },
          "dataset_id": {
            "type": "string",
            "title": "Dataset Id",
            "description": "The ID of the dataset associated with the experiment"
          },
          "dataset_version_id": {
            "type": "string",
            "title": "Dataset Version Id",
            "description": "The ID of the dataset version associated with the experiment"
          },
          "repetitions": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Repetitions",
            "description": "Number of times the experiment is repeated"
          },
          "metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Metadata",
            "description": "Metadata of the experiment"
          },
          "project_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Project Name",
            "description": "The name of the project associated with the experiment"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The creation timestamp of the experiment"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The last update timestamp of the experiment"
          }
        },
        "type": "object",
        "required": [
          "id",
          "dataset_id",
          "dataset_version_id",
          "repetitions",
          "metadata",
          "project_name",
          "created_at",
          "updated_at"
        ],
        "title": "Experiment"
      },
      "ExperimentEvaluationResult": {
        "properties": {
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "The label assigned by the evaluation"
          },
          "score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Score",
            "description": "The score assigned by the evaluation"
          },
          "explanation": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Explanation",
            "description": "Explanation of the evaluation result"
          }
        },
        "type": "object",
        "title": "ExperimentEvaluationResult"
      },
      "ExperimentRunResponse": {
        "properties": {
          "dataset_example_id": {
            "type": "string",
            "title": "Dataset Example Id",
            "description": "The ID of the dataset example used in the experiment run"
          },
          "output": {
            "title": "Output",
            "description": "The output of the experiment task"
          },
          "repetition_number": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Repetition Number",
            "description": "The repetition number of the experiment run"
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start Time",
            "description": "The start time of the experiment run"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "title": "End Time",
            "description": "The end time of the experiment run"
          },
          "trace_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Trace Id",
            "description": "The ID of the corresponding trace (if one exists)"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error",
            "description": "Optional error message if the experiment run encountered an error"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The ID of the experiment run"
          },
          "experiment_id": {
            "type": "string",
            "title": "Experiment Id",
            "description": "The ID of the experiment"
          }
        },
        "type": "object",
        "required": [
          "dataset_example_id",
          "output",
          "repetition_number",
          "start_time",
          "end_time",
          "id",
          "experiment_id"
        ],
        "title": "ExperimentRunResponse"
      },
      "FreeformAnnotationConfig": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "type": "string",
            "const": "FREEFORM",
            "title": "Type"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type",
          "id"
        ],
        "title": "FreeformAnnotationConfig"
      },
      "FreeformAnnotationConfigData": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "type": "string",
            "const": "FREEFORM",
            "title": "Type"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "title": "FreeformAnnotationConfigData"
      },
      "GetAnnotationConfigResponseBody": {
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CategoricalAnnotationConfig"
              },
              {
                "$ref": "#/components/schemas/ContinuousAnnotationConfig"
              },
              {
                "$ref": "#/components/schemas/FreeformAnnotationConfig"
              }
            ],
            "title": "Data",
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "CATEGORICAL": "#/components/schemas/CategoricalAnnotationConfig",
                "CONTINUOUS": "#/components/schemas/ContinuousAnnotationConfig",
                "FREEFORM": "#/components/schemas/FreeformAnnotationConfig"
              }
            }
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "GetAnnotationConfigResponseBody"
      },
      "GetAnnotationConfigsResponseBody": {
        "properties": {
          "data": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CategoricalAnnotationConfig"
                },
                {
                  "$ref": "#/components/schemas/ContinuousAnnotationConfig"
                },
                {
                  "$ref": "#/components/schemas/FreeformAnnotationConfig"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "CATEGORICAL": "#/components/schemas/CategoricalAnnotationConfig",
                  "CONTINUOUS": "#/components/schemas/ContinuousAnnotationConfig",
                  "FREEFORM": "#/components/schemas/FreeformAnnotationConfig"
                }
              }
            },
            "type": "array",
            "title": "Data"
          },
          "next_cursor": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Cursor"
          }
        },
        "type": "object",
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "GetAnnotationConfigsResponseBody"
      },
      "GetDatasetResponseBody": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DatasetWithExampleCount"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "GetDatasetResponseBody"
      },
      "GetExperimentResponseBody": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Experiment"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "GetExperimentResponseBody"
      },
      "GetProjectResponseBody": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Project"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "GetProjectResponseBody"
      },
      "GetProjectsResponseBody": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Project"
            },
            "type": "array",
            "title": "Data"
          },
          "next_cursor": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Cursor"
          }
        },
        "type": "object",
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "GetProjectsResponseBody"
      },
      "GetPromptResponseBody": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PromptVersion"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "GetPromptResponseBody"
      },
      "GetPromptVersionTagsResponseBody": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/PromptVersionTag"
            },
            "type": "array",
            "title": "Data"
          },
          "next_cursor": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Cursor"
          }
        },
        "type": "object",
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "GetPromptVersionTagsResponseBody"
      },
      "GetPromptVersionsResponseBody": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/PromptVersion"
            },
            "type": "array",
            "title": "Data"
          },
          "next_cursor": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Cursor"
          }
        },
        "type": "object",
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "GetPromptVersionsResponseBody"
      },
      "GetPromptsResponseBody": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Prompt"
            },
            "type": "array",
            "title": "Data"
          },
          "next_cursor": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Cursor"
          }
        },
        "type": "object",
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "GetPromptsResponseBody"
      },
      "GetUsersResponseBody": {
        "properties": {
          "data": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/LocalUser"
                },
                {
                  "$ref": "#/components/schemas/OAuth2User"
                }
              ],
              "discriminator": {
                "propertyName": "auth_method",
                "mapping": {
                  "LOCAL": "#/components/schemas/LocalUser",
                  "OAUTH2": "#/components/schemas/OAuth2User"
                }
              }
            },
            "type": "array",
            "title": "Data"
          },
          "next_cursor": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Cursor"
          }
        },
        "type": "object",
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "GetUsersResponseBody"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Identifier": {
        "type": "string",
        "pattern": "^[a-z0-9]([_a-z0-9-]*[a-z0-9])?$",
        "title": "Identifier"
      },
      "InsertedSessionAnnotation": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The ID of the inserted session annotation"
          }
        },
        "type": "object",
        "required": [
          "id"
        ],
        "title": "InsertedSessionAnnotation"
      },
      "InsertedSpanAnnotation": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The ID of the inserted span annotation"
          }
        },
        "type": "object",
        "required": [
          "id"
        ],
        "title": "InsertedSpanAnnotation"
      },
      "InsertedSpanDocumentAnnotation": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The ID of the inserted span document annotation"
          }
        },
        "type": "object",
        "required": [
          "id"
        ],
        "title": "InsertedSpanDocumentAnnotation"
      },
      "InsertedTraceAnnotation": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The ID of the inserted trace annotation"
          }
        },
        "type": "object",
        "required": [
          "id"
        ],
        "title": "InsertedTraceAnnotation"
      },
      "ListDatasetExamplesData": {
        "properties": {
          "dataset_id": {
            "type": "string",
            "title": "Dataset Id"
          },
          "version_id": {
            "type": "string",
            "title": "Version Id"
          },
          "split_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Split Ids"
          },
          "examples": {
            "items": {
              "$ref": "#/components/schemas/DatasetExample"
            },
            "type": "array",
            "title": "Examples"
          }
        },
        "type": "object",
        "required": [
          "dataset_id",
          "version_id",
          "split_ids",
          "examples"
        ],
        "title": "ListDatasetExamplesData"
      },
      "ListDatasetExamplesResponseBody": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ListDatasetExamplesData"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "ListDatasetExamplesResponseBody"
      },
      "ListDatasetVersionsResponseBody": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/DatasetVersion"
            },
            "type": "array",
            "title": "Data"
          },
          "next_cursor": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Cursor"
          }
        },
        "type": "object",
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "ListDatasetVersionsResponseBody"
      },
      "ListDatasetsResponseBody": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Dataset"
            },
            "type": "array",
            "title": "Data"
          },
          "next_cursor": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Cursor"
          }
        },
        "type": "object",
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "ListDatasetsResponseBody"
      },
      "ListExperimentRunsResponseBody": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ExperimentRunResponse"
            },
            "type": "array",
            "title": "Data"
          },
          "next_cursor": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Cursor"
          }
        },
        "type": "object",
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "ListExperimentRunsResponseBody"
      },
      "ListExperimentsResponseBody": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Experiment"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "ListExperimentsResponseBody"
      },
      "LocalUser": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "role": {
            "type": "string",
            "enum": [
              "SYSTEM",
              "ADMIN",
              "MEMBER",
              "VIEWER"
            ],
            "title": "Role"
          },
          "auth_method": {
            "type": "string",
            "const": "LOCAL",
            "title": "Auth Method"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "password_needs_reset": {
            "type": "boolean",
            "title": "Password Needs Reset"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "email",
          "username",
          "role",
          "auth_method",
          "password_needs_reset"
        ],
        "title": "LocalUser"
      },
      "LocalUserData": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "role": {
            "type": "string",
            "enum": [
              "SYSTEM",
              "ADMIN",
              "MEMBER",
              "VIEWER"
            ],
            "title": "Role"
          },
          "auth_method": {
            "type": "string",
            "const": "LOCAL",
            "title": "Auth Method"
          },
          "password": {
            "type": "string",
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "email",
          "username",
          "role",
          "auth_method"
        ],
        "title": "LocalUserData"
      },
      "ModelProvider": {
        "type": "string",
        "enum": [
          "OPENAI",
          "AZURE_OPENAI",
          "ANTHROPIC",
          "GOOGLE",
          "DEEPSEEK",
          "XAI",
          "OLLAMA",
          "AWS"
        ],
        "title": "ModelProvider"
      },
      "OAuth2User": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "role": {
            "type": "string",
            "enum": [
              "SYSTEM",
              "ADMIN",
              "MEMBER",
              "VIEWER"
            ],
            "title": "Role"
          },
          "auth_method": {
            "type": "string",
            "const": "OAUTH2",
            "title": "Auth Method"
          },
          "oauth2_client_id": {
            "type": "string",
            "title": "Oauth2 Client Id"
          },
          "oauth2_user_id": {
            "type": "string",
            "title": "Oauth2 User Id"
          },
          "profile_picture_url": {
            "type": "string",
            "title": "Profile Picture Url"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "email",
          "username",
          "role",
          "auth_method"
        ],
        "title": "OAuth2User"
      },
      "OAuth2UserData": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "role": {
            "type": "string",
            "enum": [
              "SYSTEM",
              "ADMIN",
              "MEMBER",
              "VIEWER"
            ],
            "title": "Role"
          },
          "auth_method": {
            "type": "string",
            "const": "OAUTH2",
            "title": "Auth Method"
          },
          "oauth2_client_id": {
            "type": "string",
            "title": "Oauth2 Client Id"
          },
          "oauth2_user_id": {
            "type": "string",
            "title": "Oauth2 User Id"
          }
        },
        "type": "object",
        "required": [
          "email",
          "username",
          "role",
          "auth_method"
        ],
        "title": "OAuth2UserData"
      },
      "OptimizationDirection": {
        "type": "string",
        "enum": [
          "MINIMIZE",
          "MAXIMIZE",
          "NONE"
        ],
        "title": "OptimizationDirection"
      },
      "OtlpAnyValue": {
        "properties": {
          "array_value": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OtlpArrayValue"
              },
              {
                "type": "null"
              }
            ]
          },
          "bool_value": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bool Value"
          },
          "bytes_value": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Za-z0-9+/]*={0,2}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bytes Value"
          },
          "double_value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "$ref": "#/components/schemas/OtlpDoubleValue"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Double Value"
          },
          "int_value": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMaximum": 9.223372036854776e+18,
                "minimum": -9.223372036854776e+18
              },
              {
                "type": "string",
                "pattern": "^-?[0-9]+$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Int Value"
          },
          "kvlist_value": {
            "type": "null",
            "title": "Kvlist Value"
          },
          "string_value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "String Value"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "OtlpAnyValue"
      },
      "OtlpArrayValue": {
        "properties": {
          "values": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/OtlpAnyValue"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Values",
            "description": "Array of values. The array may be empty (contain 0 elements)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "OtlpArrayValue"
      },
      "OtlpDoubleValue": {
        "type": "string",
        "enum": [
          "Infinity",
          "-Infinity",
          "NaN"
        ],
        "title": "OtlpDoubleValue"
      },
      "OtlpEvent": {
        "properties": {
          "attributes": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/OtlpKeyValue"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Attributes",
            "description": "attributes is a collection of attribute key/value pairs on the event. Attribute keys MUST be unique (it is not allowed to have more than one attribute with the same key)."
          },
          "dropped_attributes_count": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 4294967295.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Dropped Attributes Count",
            "description": "dropped_attributes_count is the number of dropped attributes. If the value is 0, then no attributes were dropped."
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "name of the event. This field is semantically required to be set to non-empty string."
          },
          "time_unix_nano": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMaximum": 1.8446744073709552e+19,
                "minimum": 0.0
              },
              {
                "type": "string",
                "pattern": "^[0-9]+$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Time Unix Nano",
            "description": "time_unix_nano is the time the event occurred. Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "OtlpEvent"
      },
      "OtlpKeyValue": {
        "properties": {
          "key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Key"
          },
          "value": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OtlpAnyValue"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "OtlpKeyValue"
      },
      "OtlpKind": {
        "type": "string",
        "enum": [
          "SPAN_KIND_UNSPECIFIED",
          "SPAN_KIND_INTERNAL",
          "SPAN_KIND_SERVER",
          "SPAN_KIND_CLIENT",
          "SPAN_KIND_PRODUCER",
          "SPAN_KIND_CONSUMER"
        ],
        "title": "OtlpKind"
      },
      "OtlpSpan": {
        "properties": {
          "attributes": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/OtlpKeyValue"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Attributes",
            "description": "attributes is a collection of key/value pairs. Note, global attributes like server name can be set using the resource API. Examples of attributes:\n\n    \"/http/user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\"\n    \"/http/server_latency\": 300\n    \"example.com/myattribute\": true\n    \"example.com/score\": 10.239\n\nThe OpenTelemetry API specification further restricts the allowed value types:\nhttps://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute\nAttribute keys MUST be unique (it is not allowed to have more than one attribute with the same key)."
          },
          "dropped_attributes_count": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 4294967295.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Dropped Attributes Count",
            "description": "dropped_attributes_count is the number of attributes that were discarded. Attributes can be discarded because their keys are too long or because there are too many attributes. If this value is 0, then no attributes were dropped."
          },
          "dropped_events_count": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 4294967295.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Dropped Events Count",
            "description": "dropped_events_count is the number of dropped events. If the value is 0, then no events were dropped."
          },
          "dropped_links_count": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 4294967295.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Dropped Links Count",
            "description": "dropped_links_count is the number of dropped links after the maximum size was enforced. If this value is 0, then no links were dropped."
          },
          "end_time_unix_nano": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMaximum": 1.8446744073709552e+19,
                "minimum": 0.0
              },
              {
                "type": "string",
                "pattern": "^[0-9]+$"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Time Unix Nano",
            "description": "end_time_unix_nano is the end time of the span. On the client side, this is the time kept by the local machine where the span execution ends. On the server side, this is the time when the server application handler stops running.\nValue is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.\n\nThis field is semantically required and it is expected that end_time >= start_time."
          },
          "events": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/OtlpEvent"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Events",
            "description": "events is a collection of Event items. A span with no events is valid."
          },
          "flags": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 4294967295.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Flags",
            "description": "Flags, a bit field.\n\nBits 0-7 (8 least significant bits) are the trace flags as defined in W3C Trace Context specification. To read the 8-bit W3C trace flag, use `flags & SPAN_FLAGS_TRACE_FLAGS_MASK`.\n\nSee https://www.w3.org/TR/trace-context-2/#trace-flags for the flag definitions.\n\nBits 8 and 9 represent the 3 states of whether a span's parent is remote. The states are (unknown, is not remote, is remote).\nTo read whether the value is known, use `(flags & SPAN_FLAGS_CONTEXT_HAS_IS_REMOTE_MASK) != 0`.\nTo read whether the span is remote, use `(flags & SPAN_FLAGS_CONTEXT_IS_REMOTE_MASK) != 0`.\n\nWhen creating span messages, if the message is logically forwarded from another source with an equivalent flags fields (i.e., usually another OTLP span message), the field SHOULD be copied as-is. If creating from a source that does not have an equivalent flags field (such as a runtime representation of an OpenTelemetry span), the high 22 bits MUST be set to zero.\nReaders MUST NOT assume that bits 10-31 (22 most significant bits) will be zero.\n\n[Optional]."
          },
          "kind": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OtlpKind"
              },
              {
                "type": "integer",
                "maximum": 2147483647.0,
                "minimum": -2147483648.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Kind",
            "description": "Distinguishes between spans generated in a particular context. For example, two spans with the same name may be distinguished using `CLIENT` (caller) and `SERVER` (callee) to identify queueing latency associated with the span.",
            "default": "SPAN_KIND_INTERNAL"
          },
          "links": {
            "type": "null",
            "title": "Links"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "A description of the span's operation.\n\nFor example, the name can be a qualified method name or a file name and a line number where the operation is called. A best practice is to use the same display name at the same call point in an application. This makes it easier to correlate spans in different traces.\n\nThis field is semantically required to be set to non-empty string. Empty value is equivalent to an unknown span name.\n\nThis field is required."
          },
          "parent_span_id": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Za-z0-9+/]*={0,2}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parent Span Id",
            "description": "The `span_id` of this span's parent span. If this is a root span, then this field must be empty. The ID is an 8-byte array."
          },
          "span_id": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Za-z0-9+/]*={0,2}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Span Id",
            "description": "A unique identifier for a span within a trace, assigned when the span is created. The ID is an 8-byte array. An ID with all zeroes OR of length other than 8 bytes is considered invalid (empty string in OTLP/JSON is zero-length and thus is also invalid).\n\nThis field is required."
          },
          "start_time_unix_nano": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMaximum": 1.8446744073709552e+19,
                "minimum": 0.0
              },
              {
                "type": "string",
                "pattern": "^[0-9]+$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Time Unix Nano",
            "description": "start_time_unix_nano is the start time of the span. On the client side, this is the time kept by the local machine where the span execution starts. On the server side, this is the time when the server's application handler starts running.\nValue is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.\n\nThis field is semantically required and it is expected that end_time >= start_time."
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OtlpStatus"
              },
              {
                "type": "null"
              }
            ],
            "description": "An optional final status for this span. Semantically when Status isn't set, it means span's status code is unset, i.e. assume STATUS_CODE_UNSET (code = 0)."
          },
          "trace_id": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[A-Za-z0-9+/]*={0,2}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Trace Id",
            "description": "A unique identifier for a trace. All spans from the same trace share the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes OR of length other than 16 bytes is considered invalid (empty string in OTLP/JSON is zero-length and thus is also invalid).\n\nThis field is required."
          },
          "trace_state": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Trace State",
            "description": "trace_state conveys information about request position in multiple distributed tracing graphs. It is a trace_state in w3c-trace-context format: https://www.w3.org/TR/trace-context/#tracestate-header\nSee also https://github.com/w3c/distributed-tracing for more details about this field."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "OtlpSpan"
      },
      "OtlpSpansResponseBody": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OtlpSpan"
            },
            "type": "array",
            "title": "Data"
          },
          "next_cursor": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Cursor"
          }
        },
        "type": "object",
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "OtlpSpansResponseBody",
        "description": "Paginated response where each span follows OTLP JSON structure."
      },
      "OtlpStatus": {
        "properties": {
          "code": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 2147483647.0,
                "minimum": -2147483648.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "The status code."
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message",
            "description": "A developer-facing human readable error message."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "OtlpStatus"
      },
      "Project": {
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "id"
        ],
        "title": "Project"
      },
      "Prompt": {
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Identifier"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "source_prompt_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Prompt Id"
          },
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "id"
        ],
        "title": "Prompt"
      },
      "PromptAnthropicInvocationParameters": {
        "properties": {
          "type": {
            "type": "string",
            "const": "anthropic",
            "title": "Type"
          },
          "anthropic": {
            "$ref": "#/components/schemas/PromptAnthropicInvocationParametersContent"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "type",
          "anthropic"
        ],
        "title": "PromptAnthropicInvocationParameters"
      },
      "PromptAnthropicInvocationParametersContent": {
        "properties": {
          "max_tokens": {
            "type": "integer",
            "title": "Max Tokens"
          },
          "temperature": {
            "type": "number",
            "title": "Temperature"
          },
          "top_p": {
            "type": "number",
            "title": "Top P"
          },
          "stop_sequences": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Stop Sequences"
          },
          "thinking": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PromptAnthropicThinkingConfigDisabled"
              },
              {
                "$ref": "#/components/schemas/PromptAnthropicThinkingConfigEnabled"
              }
            ],
            "title": "Thinking",
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "disabled": "#/components/schemas/PromptAnthropicThinkingConfigDisabled",
                "enabled": "#/components/schemas/PromptAnthropicThinkingConfigEnabled"
              }
            }
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "max_tokens"
        ],
        "title": "PromptAnthropicInvocationParametersContent"
      },
      "PromptAnthropicThinkingConfigDisabled": {
        "properties": {
          "type": {
            "type": "string",
            "const": "disabled",
            "title": "Type"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "type"
        ],
        "title": "PromptAnthropicThinkingConfigDisabled"
      },
      "PromptAnthropicThinkingConfigEnabled": {
        "properties": {
          "type": {
            "type": "string",
            "const": "enabled",
            "title": "Type"
          },
          "budget_tokens": {
            "type": "integer",
            "minimum": 1024.0,
            "title": "Budget Tokens"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "type",
          "budget_tokens"
        ],
        "title": "PromptAnthropicThinkingConfigEnabled"
      },
      "PromptAwsInvocationParameters": {
        "properties": {
          "type": {
            "type": "string",
            "const": "aws",
            "title": "Type"
          },
          "aws": {
            "$ref": "#/components/schemas/PromptAwsInvocationParametersContent"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "type",
          "aws"
        ],
        "title": "PromptAwsInvocationParameters"
      },
      "PromptAwsInvocationParametersContent": {
        "properties": {
          "max_tokens": {
            "type": "integer",
            "title": "Max Tokens"
          },
          "temperature": {
            "type": "number",
            "title": "Temperature"
          },
          "top_p": {
            "type": "number",
            "title": "Top P"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PromptAwsInvocationParametersContent"
      },
      "PromptAzureOpenAIInvocationParameters": {
        "properties": {
          "type": {
            "type": "string",
            "const": "azure_openai",
            "title": "Type"
          },
          "azure_openai": {
            "$ref": "#/components/schemas/PromptAzureOpenAIInvocationParametersContent"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "type",
          "azure_openai"
        ],
        "title": "PromptAzureOpenAIInvocationParameters"
      },
      "PromptAzureOpenAIInvocationParametersContent": {
        "properties": {
          "temperature": {
            "type": "number",
            "title": "Temperature"
          },
          "max_tokens": {
            "type": "integer",
            "title": "Max Tokens"
          },
          "max_completion_tokens": {
            "type": "integer",
            "title": "Max Completion Tokens"
          },
          "frequency_penalty": {
            "type": "number",
            "title": "Frequency Penalty"
          },
          "presence_penalty": {
            "type": "number",
            "title": "Presence Penalty"
          },
          "top_p": {
            "type": "number",
            "title": "Top P"
          },
          "seed": {
            "type": "integer",
            "title": "Seed"
          },
          "reasoning_effort": {
            "type": "string",
            "enum": [
              "minimal",
              "low",
              "medium",
              "high"
            ],
            "title": "Reasoning Effort"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PromptAzureOpenAIInvocationParametersContent"
      },
      "PromptChatTemplate": {
        "properties": {
          "type": {
            "type": "string",
            "const": "chat",
            "title": "Type"
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/PromptMessage"
            },
            "type": "array",
            "title": "Messages"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "type",
          "messages"
        ],
        "title": "PromptChatTemplate"
      },
      "PromptData": {
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Identifier"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "source_prompt_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Prompt Id"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "PromptData"
      },
      "PromptDeepSeekInvocationParameters": {
        "properties": {
          "type": {
            "type": "string",
            "const": "deepseek",
            "title": "Type"
          },
          "deepseek": {
            "$ref": "#/components/schemas/PromptDeepSeekInvocationParametersContent"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "type",
          "deepseek"
        ],
        "title": "PromptDeepSeekInvocationParameters"
      },
      "PromptDeepSeekInvocationParametersContent": {
        "properties": {
          "temperature": {
            "type": "number",
            "title": "Temperature"
          },
          "max_tokens": {
            "type": "integer",
            "title": "Max Tokens"
          },
          "max_completion_tokens": {
            "type": "integer",
            "title": "Max Completion Tokens"
          },
          "frequency_penalty": {
            "type": "number",
            "title": "Frequency Penalty"
          },
          "presence_penalty": {
            "type": "number",
            "title": "Presence Penalty"
          },
          "top_p": {
            "type": "number",
            "title": "Top P"
          },
          "seed": {
            "type": "integer",
            "title": "Seed"
          },
          "reasoning_effort": {
            "type": "string",
            "enum": [
              "minimal",
              "low",
              "medium",
              "high"
            ],
            "title": "Reasoning Effort"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PromptDeepSeekInvocationParametersContent"
      },
      "PromptGoogleInvocationParameters": {
        "properties": {
          "type": {
            "type": "string",
            "const": "google",
            "title": "Type"
          },
          "google": {
            "$ref": "#/components/schemas/PromptGoogleInvocationParametersContent"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "type",
          "google"
        ],
        "title": "PromptGoogleInvocationParameters"
      },
      "PromptGoogleInvocationParametersContent": {
        "properties": {
          "temperature": {
            "type": "number",
            "title": "Temperature"
          },
          "max_output_tokens": {
            "type": "integer",
            "title": "Max Output Tokens"
          },
          "stop_sequences": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Stop Sequences"
          },
          "presence_penalty": {
            "type": "number",
            "title": "Presence Penalty"
          },
          "frequency_penalty": {
            "type": "number",
            "title": "Frequency Penalty"
          },
          "top_p": {
            "type": "number",
            "title": "Top P"
          },
          "top_k": {
            "type": "integer",
            "title": "Top K"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PromptGoogleInvocationParametersContent"
      },
      "PromptMessage": {
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "user",
              "assistant",
              "model",
              "ai",
              "tool",
              "system",
              "developer"
            ],
            "title": "Role"
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/TextContentPart"
                    },
                    {
                      "$ref": "#/components/schemas/ToolCallContentPart"
                    },
                    {
                      "$ref": "#/components/schemas/ToolResultContentPart"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "text": "#/components/schemas/TextContentPart",
                      "tool_call": "#/components/schemas/ToolCallContentPart",
                      "tool_result": "#/components/schemas/ToolResultContentPart"
                    }
                  }
                },
                "type": "array",
                "minItems": 1
              }
            ],
            "title": "Content"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "title": "PromptMessage"
      },
      "PromptOllamaInvocationParameters": {
        "properties": {
          "type": {
            "type": "string",
            "const": "ollama",
            "title": "Type"
          },
          "ollama": {
            "$ref": "#/components/schemas/PromptOllamaInvocationParametersContent"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "type",
          "ollama"
        ],
        "title": "PromptOllamaInvocationParameters"
      },
      "PromptOllamaInvocationParametersContent": {
        "properties": {
          "temperature": {
            "type": "number",
            "title": "Temperature"
          },
          "max_tokens": {
            "type": "integer",
            "title": "Max Tokens"
          },
          "max_completion_tokens": {
            "type": "integer",
            "title": "Max Completion Tokens"
          },
          "frequency_penalty": {
            "type": "number",
            "title": "Frequency Penalty"
          },
          "presence_penalty": {
            "type": "number",
            "title": "Presence Penalty"
          },
          "top_p": {
            "type": "number",
            "title": "Top P"
          },
          "seed": {
            "type": "integer",
            "title": "Seed"
          },
          "reasoning_effort": {
            "type": "string",
            "enum": [
              "minimal",
              "low",
              "medium",
              "high"
            ],
            "title": "Reasoning Effort"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PromptOllamaInvocationParametersContent"
      },
      "PromptOpenAIInvocationParameters": {
        "properties": {
          "type": {
            "type": "string",
            "const": "openai",
            "title": "Type"
          },
          "openai": {
            "$ref": "#/components/schemas/PromptOpenAIInvocationParametersContent"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "type",
          "openai"
        ],
        "title": "PromptOpenAIInvocationParameters"
      },
      "PromptOpenAIInvocationParametersContent": {
        "properties": {
          "temperature": {
            "type": "number",
            "title": "Temperature"
          },
          "max_tokens": {
            "type": "integer",
            "title": "Max Tokens"
          },
          "max_completion_tokens": {
            "type": "integer",
            "title": "Max Completion Tokens"
          },
          "frequency_penalty": {
            "type": "number",
            "title": "Frequency Penalty"
          },
          "presence_penalty": {
            "type": "number",
            "title": "Presence Penalty"
          },
          "top_p": {
            "type": "number",
            "title": "Top P"
          },
          "seed": {
            "type": "integer",
            "title": "Seed"
          },
          "reasoning_effort": {
            "type": "string",
            "enum": [
              "minimal",
              "low",
              "medium",
              "high"
            ],
            "title": "Reasoning Effort"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PromptOpenAIInvocationParametersContent"
      },
      "PromptResponseFormatJSONSchema": {
        "properties": {
          "type": {
            "type": "string",
            "const": "json_schema",
            "title": "Type"
          },
          "json_schema": {
            "$ref": "#/components/schemas/PromptResponseFormatJSONSchemaDefinition"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "type",
          "json_schema"
        ],
        "title": "PromptResponseFormatJSONSchema"
      },
      "PromptResponseFormatJSONSchemaDefinition": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "schema": {
            "additionalProperties": true,
            "type": "object",
            "title": "Schema"
          },
          "strict": {
            "type": "boolean",
            "title": "Strict"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "name"
        ],
        "title": "PromptResponseFormatJSONSchemaDefinition"
      },
      "PromptStringTemplate": {
        "properties": {
          "type": {
            "type": "string",
            "const": "string",
            "title": "Type"
          },
          "template": {
            "type": "string",
            "title": "Template"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "type",
          "template"
        ],
        "title": "PromptStringTemplate"
      },
      "PromptTemplateFormat": {
        "type": "string",
        "enum": [
          "MUSTACHE",
          "F_STRING",
          "NONE"
        ],
        "title": "PromptTemplateFormat"
      },
      "PromptTemplateType": {
        "type": "string",
        "enum": [
          "STR",
          "CHAT"
        ],
        "title": "PromptTemplateType"
      },
      "PromptToolChoiceNone": {
        "properties": {
          "type": {
            "type": "string",
            "const": "none",
            "title": "Type"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "type"
        ],
        "title": "PromptToolChoiceNone"
      },
      "PromptToolChoiceOneOrMore": {
        "properties": {
          "type": {
            "type": "string",
            "const": "one_or_more",
            "title": "Type"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "type"
        ],
        "title": "PromptToolChoiceOneOrMore"
      },
      "PromptToolChoiceSpecificFunctionTool": {
        "properties": {
          "type": {
            "type": "string",
            "const": "specific_function",
            "title": "Type"
          },
          "function_name": {
            "type": "string",
            "title": "Function Name"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "type",
          "function_name"
        ],
        "title": "PromptToolChoiceSpecificFunctionTool"
      },
      "PromptToolChoiceZeroOrMore": {
        "properties": {
          "type": {
            "type": "string",
            "const": "zero_or_more",
            "title": "Type"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "type"
        ],
        "title": "PromptToolChoiceZeroOrMore"
      },
      "PromptToolFunction": {
        "properties": {
          "type": {
            "type": "string",
            "const": "function",
            "title": "Type"
          },
          "function": {
            "$ref": "#/components/schemas/PromptToolFunctionDefinition"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "type",
          "function"
        ],
        "title": "PromptToolFunction"
      },
      "PromptToolFunctionDefinition": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "parameters": {
            "additionalProperties": true,
            "type": "object",
            "title": "Parameters"
          },
          "strict": {
            "type": "boolean",
            "title": "Strict"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "name"
        ],
        "title": "PromptToolFunctionDefinition"
      },
      "PromptTools": {
        "properties": {
          "type": {
            "type": "string",
            "const": "tools",
            "title": "Type"
          },
          "tools": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PromptToolFunction"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "function": "#/components/schemas/PromptToolFunction"
                }
              }
            },
            "type": "array",
            "minItems": 1,
            "title": "Tools"
          },
          "tool_choice": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PromptToolChoiceNone"
              },
              {
                "$ref": "#/components/schemas/PromptToolChoiceZeroOrMore"
              },
              {
                "$ref": "#/components/schemas/PromptToolChoiceOneOrMore"
              },
              {
                "$ref": "#/components/schemas/PromptToolChoiceSpecificFunctionTool"
              }
            ],
            "title": "Tool Choice",
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "none": "#/components/schemas/PromptToolChoiceNone",
                "one_or_more": "#/components/schemas/PromptToolChoiceOneOrMore",
                "specific_function": "#/components/schemas/PromptToolChoiceSpecificFunctionTool",
                "zero_or_more": "#/components/schemas/PromptToolChoiceZeroOrMore"
              }
            }
          },
          "disable_parallel_tool_calls": {
            "type": "boolean",
            "title": "Disable Parallel Tool Calls"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "type",
          "tools"
        ],
        "title": "PromptTools"
      },
      "PromptVersion": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "model_provider": {
            "$ref": "#/components/schemas/ModelProvider"
          },
          "model_name": {
            "type": "string",
            "title": "Model Name"
          },
          "template": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PromptChatTemplate"
              },
              {
                "$ref": "#/components/schemas/PromptStringTemplate"
              }
            ],
            "title": "Template",
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "chat": "#/components/schemas/PromptChatTemplate",
                "string": "#/components/schemas/PromptStringTemplate"
              }
            }
          },
          "template_type": {
            "$ref": "#/components/schemas/PromptTemplateType"
          },
          "template_format": {
            "$ref": "#/components/schemas/PromptTemplateFormat"
          },
          "invocation_parameters": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PromptOpenAIInvocationParameters"
              },
              {
                "$ref": "#/components/schemas/PromptAzureOpenAIInvocationParameters"
              },
              {
                "$ref": "#/components/schemas/PromptAnthropicInvocationParameters"
              },
              {
                "$ref": "#/components/schemas/PromptGoogleInvocationParameters"
              },
              {
                "$ref": "#/components/schemas/PromptDeepSeekInvocationParameters"
              },
              {
                "$ref": "#/components/schemas/PromptXAIInvocationParameters"
              },
              {
                "$ref": "#/components/schemas/PromptOllamaInvocationParameters"
              },
              {
                "$ref": "#/components/schemas/PromptAwsInvocationParameters"
              }
            ],
            "title": "Invocation Parameters",
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "anthropic": "#/components/schemas/PromptAnthropicInvocationParameters",
                "aws": "#/components/schemas/PromptAwsInvocationParameters",
                "azure_openai": "#/components/schemas/PromptAzureOpenAIInvocationParameters",
                "deepseek": "#/components/schemas/PromptDeepSeekInvocationParameters",
                "google": "#/components/schemas/PromptGoogleInvocationParameters",
                "ollama": "#/components/schemas/PromptOllamaInvocationParameters",
                "openai": "#/components/schemas/PromptOpenAIInvocationParameters",
                "xai": "#/components/schemas/PromptXAIInvocationParameters"
              }
            }
          },
          "tools": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PromptTools"
              },
              {
                "type": "null"
              }
            ]
          },
          "response_format": {
            "anyOf": [
              {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PromptResponseFormatJSONSchema"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "json_schema": "#/components/schemas/PromptResponseFormatJSONSchema"
                  }
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Response Format"
          },
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "model_provider",
          "model_name",
          "template",
          "template_type",
          "template_format",
          "invocation_parameters",
          "id"
        ],
        "title": "PromptVersion"
      },
      "PromptVersionData": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "model_provider": {
            "$ref": "#/components/schemas/ModelProvider"
          },
          "model_name": {
            "type": "string",
            "title": "Model Name"
          },
          "template": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PromptChatTemplate"
              },
              {
                "$ref": "#/components/schemas/PromptStringTemplate"
              }
            ],
            "title": "Template",
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "chat": "#/components/schemas/PromptChatTemplate",
                "string": "#/components/schemas/PromptStringTemplate"
              }
            }
          },
          "template_type": {
            "$ref": "#/components/schemas/PromptTemplateType"
          },
          "template_format": {
            "$ref": "#/components/schemas/PromptTemplateFormat"
          },
          "invocation_parameters": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PromptOpenAIInvocationParameters"
              },
              {
                "$ref": "#/components/schemas/PromptAzureOpenAIInvocationParameters"
              },
              {
                "$ref": "#/components/schemas/PromptAnthropicInvocationParameters"
              },
              {
                "$ref": "#/components/schemas/PromptGoogleInvocationParameters"
              },
              {
                "$ref": "#/components/schemas/PromptDeepSeekInvocationParameters"
              },
              {
                "$ref": "#/components/schemas/PromptXAIInvocationParameters"
              },
              {
                "$ref": "#/components/schemas/PromptOllamaInvocationParameters"
              },
              {
                "$ref": "#/components/schemas/PromptAwsInvocationParameters"
              }
            ],
            "title": "Invocation Parameters",
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "anthropic": "#/components/schemas/PromptAnthropicInvocationParameters",
                "aws": "#/components/schemas/PromptAwsInvocationParameters",
                "azure_openai": "#/components/schemas/PromptAzureOpenAIInvocationParameters",
                "deepseek": "#/components/schemas/PromptDeepSeekInvocationParameters",
                "google": "#/components/schemas/PromptGoogleInvocationParameters",
                "ollama": "#/components/schemas/PromptOllamaInvocationParameters",
                "openai": "#/components/schemas/PromptOpenAIInvocationParameters",
                "xai": "#/components/schemas/PromptXAIInvocationParameters"
              }
            }
          },
          "tools": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PromptTools"
              },
              {
                "type": "null"
              }
            ]
          },
          "response_format": {
            "anyOf": [
              {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PromptResponseFormatJSONSchema"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "json_schema": "#/components/schemas/PromptResponseFormatJSONSchema"
                  }
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Response Format"
          }
        },
        "type": "object",
        "required": [
          "model_provider",
          "model_name",
          "template",
          "template_type",
          "template_format",
          "invocation_parameters"
        ],
        "title": "PromptVersionData"
      },
      "PromptVersionTag": {
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Identifier"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "id"
        ],
        "title": "PromptVersionTag"
      },
      "PromptVersionTagData": {
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Identifier"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "PromptVersionTagData"
      },
      "PromptXAIInvocationParameters": {
        "properties": {
          "type": {
            "type": "string",
            "const": "xai",
            "title": "Type"
          },
          "xai": {
            "$ref": "#/components/schemas/PromptXAIInvocationParametersContent"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "type",
          "xai"
        ],
        "title": "PromptXAIInvocationParameters"
      },
      "PromptXAIInvocationParametersContent": {
        "properties": {
          "temperature": {
            "type": "number",
            "title": "Temperature"
          },
          "max_tokens": {
            "type": "integer",
            "title": "Max Tokens"
          },
          "max_completion_tokens": {
            "type": "integer",
            "title": "Max Completion Tokens"
          },
          "frequency_penalty": {
            "type": "number",
            "title": "Frequency Penalty"
          },
          "presence_penalty": {
            "type": "number",
            "title": "Presence Penalty"
          },
          "top_p": {
            "type": "number",
            "title": "Top P"
          },
          "seed": {
            "type": "integer",
            "title": "Seed"
          },
          "reasoning_effort": {
            "type": "string",
            "enum": [
              "minimal",
              "low",
              "medium",
              "high"
            ],
            "title": "Reasoning Effort"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PromptXAIInvocationParametersContent"
      },
      "SessionAnnotation": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "source": {
            "type": "string",
            "enum": [
              "API",
              "APP"
            ],
            "title": "Source"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the annotation"
          },
          "annotator_kind": {
            "type": "string",
            "enum": [
              "LLM",
              "CODE",
              "HUMAN"
            ],
            "title": "Annotator Kind",
            "description": "The kind of annotator used for the annotation"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AnnotationResult"
              },
              {
                "type": "null"
              }
            ],
            "description": "The result of the annotation"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Metadata for the annotation"
          },
          "identifier": {
            "type": "string",
            "title": "Identifier",
            "description": "The identifier of the annotation. If provided, the annotation will be updated if it already exists.",
            "default": ""
          },
          "session_id": {
            "type": "string",
            "title": "Session Id",
            "description": "Session ID"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "source",
          "user_id",
          "name",
          "annotator_kind",
          "session_id"
        ],
        "title": "SessionAnnotation"
      },
      "SessionAnnotationData": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the annotation"
          },
          "annotator_kind": {
            "type": "string",
            "enum": [
              "LLM",
              "CODE",
              "HUMAN"
            ],
            "title": "Annotator Kind",
            "description": "The kind of annotator used for the annotation"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AnnotationResult"
              },
              {
                "type": "null"
              }
            ],
            "description": "The result of the annotation"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Metadata for the annotation"
          },
          "identifier": {
            "type": "string",
            "title": "Identifier",
            "description": "The identifier of the annotation. If provided, the annotation will be updated if it already exists.",
            "default": ""
          },
          "session_id": {
            "type": "string",
            "title": "Session Id",
            "description": "Session ID"
          }
        },
        "type": "object",
        "required": [
          "name",
          "annotator_kind",
          "session_id"
        ],
        "title": "SessionAnnotationData"
      },
      "SessionAnnotationsResponseBody": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/SessionAnnotation"
            },
            "type": "array",
            "title": "Data"
          },
          "next_cursor": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Cursor"
          }
        },
        "type": "object",
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "SessionAnnotationsResponseBody"
      },
      "Span": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Span Global ID, distinct from the OpenTelemetry span ID",
            "default": ""
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the span operation"
          },
          "context": {
            "$ref": "#/components/schemas/SpanContext",
            "description": "Span context containing trace_id and span_id"
          },
          "span_kind": {
            "type": "string",
            "title": "Span Kind",
            "description": "Type of work that the span encapsulates"
          },
          "parent_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parent Id",
            "description": "OpenTelemetry span ID of the parent span"
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start Time",
            "description": "Start time of the span"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "title": "End Time",
            "description": "End time of the span"
          },
          "status_code": {
            "type": "string",
            "title": "Status Code",
            "description": "Status code of the span"
          },
          "status_message": {
            "type": "string",
            "title": "Status Message",
            "description": "Status message",
            "default": ""
          },
          "attributes": {
            "additionalProperties": true,
            "type": "object",
            "title": "Attributes",
            "description": "Span attributes"
          },
          "events": {
            "items": {
              "$ref": "#/components/schemas/SpanEvent"
            },
            "type": "array",
            "title": "Events",
            "description": "Span events"
          }
        },
        "type": "object",
        "required": [
          "name",
          "context",
          "span_kind",
          "start_time",
          "end_time",
          "status_code"
        ],
        "title": "Span"
      },
      "SpanAnnotation": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "source": {
            "type": "string",
            "enum": [
              "API",
              "APP"
            ],
            "title": "Source"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the annotation"
          },
          "annotator_kind": {
            "type": "string",
            "enum": [
              "LLM",
              "CODE",
              "HUMAN"
            ],
            "title": "Annotator Kind",
            "description": "The kind of annotator used for the annotation"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AnnotationResult"
              },
              {
                "type": "null"
              }
            ],
            "description": "The result of the annotation"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Metadata for the annotation"
          },
          "identifier": {
            "type": "string",
            "title": "Identifier",
            "description": "The identifier of the annotation. If provided, the annotation will be updated if it already exists.",
            "default": ""
          },
          "span_id": {
            "type": "string",
            "title": "Span Id",
            "description": "OpenTelemetry Span ID (hex format w/o 0x prefix)"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "source",
          "user_id",
          "name",
          "annotator_kind",
          "span_id"
        ],
        "title": "SpanAnnotation"
      },
      "SpanAnnotationData": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the annotation"
          },
          "annotator_kind": {
            "type": "string",
            "enum": [
              "LLM",
              "CODE",
              "HUMAN"
            ],
            "title": "Annotator Kind",
            "description": "The kind of annotator used for the annotation"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AnnotationResult"
              },
              {
                "type": "null"
              }
            ],
            "description": "The result of the annotation"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Metadata for the annotation"
          },
          "identifier": {
            "type": "string",
            "title": "Identifier",
            "description": "The identifier of the annotation. If provided, the annotation will be updated if it already exists.",
            "default": ""
          },
          "span_id": {
            "type": "string",
            "title": "Span Id",
            "description": "OpenTelemetry Span ID (hex format w/o 0x prefix)"
          }
        },
        "type": "object",
        "required": [
          "name",
          "annotator_kind",
          "span_id"
        ],
        "title": "SpanAnnotationData"
      },
      "SpanAnnotationsResponseBody": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/SpanAnnotation"
            },
            "type": "array",
            "title": "Data"
          },
          "next_cursor": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Cursor"
          }
        },
        "type": "object",
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "SpanAnnotationsResponseBody"
      },
      "SpanContext": {
        "properties": {
          "trace_id": {
            "type": "string",
            "title": "Trace Id",
            "description": "OpenTelemetry trace ID"
          },
          "span_id": {
            "type": "string",
            "title": "Span Id",
            "description": "OpenTelemetry span ID"
          }
        },
        "type": "object",
        "required": [
          "trace_id",
          "span_id"
        ],
        "title": "SpanContext"
      },
      "SpanDocumentAnnotationData": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the annotation"
          },
          "annotator_kind": {
            "type": "string",
            "enum": [
              "LLM",
              "CODE",
              "HUMAN"
            ],
            "title": "Annotator Kind",
            "description": "The kind of annotator used for the annotation"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AnnotationResult"
              },
              {
                "type": "null"
              }
            ],
            "description": "The result of the annotation"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Metadata for the annotation"
          },
          "identifier": {
            "type": "string",
            "title": "Identifier",
            "description": "The identifier of the annotation. If provided, the annotation will be updated if it already exists.",
            "default": ""
          },
          "span_id": {
            "type": "string",
            "title": "Span Id",
            "description": "OpenTelemetry Span ID (hex format w/o 0x prefix)"
          },
          "document_position": {
            "type": "integer",
            "title": "Document Position",
            "description": "A 0 based index of the document. E.x. the first document during retrieval is 0"
          }
        },
        "type": "object",
        "required": [
          "name",
          "annotator_kind",
          "span_id",
          "document_position"
        ],
        "title": "SpanDocumentAnnotationData"
      },
      "SpanEvent": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the event"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "When the event occurred"
          },
          "attributes": {
            "additionalProperties": true,
            "type": "object",
            "title": "Attributes",
            "description": "Event attributes"
          }
        },
        "type": "object",
        "required": [
          "name",
          "timestamp"
        ],
        "title": "SpanEvent"
      },
      "SpansResponseBody": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Span"
            },
            "type": "array",
            "title": "Data"
          },
          "next_cursor": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Cursor"
          }
        },
        "type": "object",
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "SpansResponseBody"
      },
      "TextContentPart": {
        "properties": {
          "type": {
            "type": "string",
            "const": "text",
            "title": "Type"
          },
          "text": {
            "type": "string",
            "title": "Text"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "type",
          "text"
        ],
        "title": "TextContentPart"
      },
      "ToolCallContentPart": {
        "properties": {
          "type": {
            "type": "string",
            "const": "tool_call",
            "title": "Type"
          },
          "tool_call_id": {
            "type": "string",
            "title": "Tool Call Id"
          },
          "tool_call": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ToolCallFunction"
              }
            ],
            "title": "Tool Call",
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "function": "#/components/schemas/ToolCallFunction"
              }
            }
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "type",
          "tool_call_id",
          "tool_call"
        ],
        "title": "ToolCallContentPart"
      },
      "ToolCallFunction": {
        "properties": {
          "type": {
            "type": "string",
            "const": "function",
            "title": "Type"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "arguments": {
            "type": "string",
            "title": "Arguments"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "type",
          "name",
          "arguments"
        ],
        "title": "ToolCallFunction"
      },
      "ToolResultContentPart": {
        "properties": {
          "type": {
            "type": "string",
            "const": "tool_result",
            "title": "Type"
          },
          "tool_call_id": {
            "type": "string",
            "title": "Tool Call Id"
          },
          "tool_result": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Result"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "type",
          "tool_call_id",
          "tool_result"
        ],
        "title": "ToolResultContentPart"
      },
      "TraceAnnotation": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "source": {
            "type": "string",
            "enum": [
              "API",
              "APP"
            ],
            "title": "Source"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the annotation"
          },
          "annotator_kind": {
            "type": "string",
            "enum": [
              "LLM",
              "CODE",
              "HUMAN"
            ],
            "title": "Annotator Kind",
            "description": "The kind of annotator used for the annotation"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AnnotationResult"
              },
              {
                "type": "null"
              }
            ],
            "description": "The result of the annotation"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Metadata for the annotation"
          },
          "identifier": {
            "type": "string",
            "title": "Identifier",
            "description": "The identifier of the annotation. If provided, the annotation will be updated if it already exists.",
            "default": ""
          },
          "trace_id": {
            "type": "string",
            "title": "Trace Id",
            "description": "OpenTelemetry Trace ID (hex format w/o 0x prefix)"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "source",
          "user_id",
          "name",
          "annotator_kind",
          "trace_id"
        ],
        "title": "TraceAnnotation"
      },
      "TraceAnnotationData": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the annotation"
          },
          "annotator_kind": {
            "type": "string",
            "enum": [
              "LLM",
              "CODE",
              "HUMAN"
            ],
            "title": "Annotator Kind",
            "description": "The kind of annotator used for the annotation"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AnnotationResult"
              },
              {
                "type": "null"
              }
            ],
            "description": "The result of the annotation"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Metadata for the annotation"
          },
          "identifier": {
            "type": "string",
            "title": "Identifier",
            "description": "The identifier of the annotation. If provided, the annotation will be updated if it already exists.",
            "default": ""
          },
          "trace_id": {
            "type": "string",
            "title": "Trace Id",
            "description": "OpenTelemetry Trace ID (hex format w/o 0x prefix)"
          }
        },
        "type": "object",
        "required": [
          "name",
          "annotator_kind",
          "trace_id"
        ],
        "title": "TraceAnnotationData"
      },
      "TraceAnnotationsResponseBody": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/TraceAnnotation"
            },
            "type": "array",
            "title": "Data"
          },
          "next_cursor": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Cursor"
          }
        },
        "type": "object",
        "required": [
          "data",
          "next_cursor"
        ],
        "title": "TraceAnnotationsResponseBody"
      },
      "UpdateAnnotationConfigResponseBody": {
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CategoricalAnnotationConfig"
              },
              {
                "$ref": "#/components/schemas/ContinuousAnnotationConfig"
              },
              {
                "$ref": "#/components/schemas/FreeformAnnotationConfig"
              }
            ],
            "title": "Data",
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "CATEGORICAL": "#/components/schemas/CategoricalAnnotationConfig",
                "CONTINUOUS": "#/components/schemas/ContinuousAnnotationConfig",
                "FREEFORM": "#/components/schemas/FreeformAnnotationConfig"
              }
            }
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "UpdateAnnotationConfigResponseBody"
      },
      "UpdateProjectRequestBody": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "title": "UpdateProjectRequestBody"
      },
      "UpdateProjectResponseBody": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Project"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "UpdateProjectResponseBody"
      },
      "UploadDatasetData": {
        "properties": {
          "dataset_id": {
            "type": "string",
            "title": "Dataset Id"
          },
          "version_id": {
            "type": "string",
            "title": "Version Id"
          }
        },
        "type": "object",
        "required": [
          "dataset_id",
          "version_id"
        ],
        "title": "UploadDatasetData"
      },
      "UploadDatasetResponseBody": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UploadDatasetData"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "UploadDatasetResponseBody"
      },
      "UpsertExperimentEvaluationRequestBody": {
        "properties": {
          "experiment_run_id": {
            "type": "string",
            "title": "Experiment Run Id",
            "description": "The ID of the experiment run being evaluated"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the evaluation"
          },
          "annotator_kind": {
            "type": "string",
            "enum": [
              "LLM",
              "CODE",
              "HUMAN"
            ],
            "title": "Annotator Kind",
            "description": "The kind of annotator used for the evaluation"
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start Time",
            "description": "The start time of the evaluation in ISO format"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "title": "End Time",
            "description": "The end time of the evaluation in ISO format"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ExperimentEvaluationResult"
              },
              {
                "type": "null"
              }
            ],
            "description": "The result of the evaluation. Either result or error must be provided."
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error",
            "description": "Error message if the evaluation encountered an error. Either result or error must be provided."
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Metadata for the evaluation"
          },
          "trace_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Trace Id",
            "description": "Optional trace ID for tracking"
          }
        },
        "type": "object",
        "required": [
          "experiment_run_id",
          "name",
          "annotator_kind",
          "start_time",
          "end_time"
        ],
        "title": "UpsertExperimentEvaluationRequestBody"
      },
      "UpsertExperimentEvaluationResponseBody": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UpsertExperimentEvaluationResponseBodyData"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "UpsertExperimentEvaluationResponseBody"
      },
      "UpsertExperimentEvaluationResponseBodyData": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The ID of the upserted experiment evaluation"
          }
        },
        "type": "object",
        "required": [
          "id"
        ],
        "title": "UpsertExperimentEvaluationResponseBodyData"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  }
}