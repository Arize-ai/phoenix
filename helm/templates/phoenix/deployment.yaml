apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app: {{ .Release.Name }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "2"
spec:
  replicas: {{ .Values.replicaCount | default 1 }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: {{ .Values.deployment.strategy.maxUnavailable | default "25%" }}
      maxSurge: {{ .Values.deployment.strategy.maxSurge | default "25%" }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ .Values.serviceAccount.name | default .Release.Name }}
      {{- end }}
      {{- if .Values.securityContext.pod.enabled }}
      securityContext:
        {{- if .Values.securityContext.pod.runAsNonRoot }}
        runAsNonRoot: {{ .Values.securityContext.pod.runAsNonRoot }}
        {{- end }}
        {{- if .Values.securityContext.pod.runAsUser }}
        runAsUser: {{ .Values.securityContext.pod.runAsUser }}
        {{- end }}
        {{- if .Values.securityContext.pod.runAsGroup }}
        runAsGroup: {{ .Values.securityContext.pod.runAsGroup }}
        {{- end }}
        {{- if .Values.securityContext.pod.fsGroup }}
        fsGroup: {{ .Values.securityContext.pod.fsGroup }}
        {{- end }}
        {{- if .Values.securityContext.pod.fsGroupChangePolicy }}
        fsGroupChangePolicy: {{ .Values.securityContext.pod.fsGroupChangePolicy }}
        {{- end }}
        {{- if .Values.securityContext.pod.seccompProfile }}
        seccompProfile:
          {{- toYaml .Values.securityContext.pod.seccompProfile | nindent 10 }}
        {{- end }}
        {{- if .Values.securityContext.pod.seLinuxOptions }}
        seLinuxOptions:
          {{- toYaml .Values.securityContext.pod.seLinuxOptions | nindent 10 }}
        {{- end }}
        {{- if .Values.securityContext.pod.supplementalGroups }}
        supplementalGroups:
          {{- toYaml .Values.securityContext.pod.supplementalGroups | nindent 10 }}
        {{- end }}
        {{- if .Values.securityContext.pod.sysctls }}
        sysctls:
          {{- toYaml .Values.securityContext.pod.sysctls | nindent 10 }}
        {{- end }}
        {{- if .Values.securityContext.pod.windowsOptions }}
        windowsOptions:
          {{- toYaml .Values.securityContext.pod.windowsOptions | nindent 10 }}
        {{- end }}
      {{- end }}
      containers:
        - name: phoenix
          image: {{ .Values.image.repository | default "arizephoenix/phoenix" }}:{{ .Values.image.tag | default "latest" }}
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
          {{- if .Values.securityContext.container.enabled }}
          securityContext:
            {{- if .Values.securityContext.container.runAsNonRoot }}
            runAsNonRoot: {{ .Values.securityContext.container.runAsNonRoot }}
            {{- end }}
            {{- if .Values.securityContext.container.runAsUser }}
            runAsUser: {{ .Values.securityContext.container.runAsUser }}
            {{- end }}
            {{- if .Values.securityContext.container.runAsGroup }}
            runAsGroup: {{ .Values.securityContext.container.runAsGroup }}
            {{- end }}
            {{- if hasKey .Values.securityContext.container "allowPrivilegeEscalation" }}
            allowPrivilegeEscalation: {{ .Values.securityContext.container.allowPrivilegeEscalation }}
            {{- end }}
            {{- if .Values.securityContext.container.privileged }}
            privileged: {{ .Values.securityContext.container.privileged }}
            {{- end }}
            {{- if .Values.securityContext.container.readOnlyRootFilesystem }}
            readOnlyRootFilesystem: {{ .Values.securityContext.container.readOnlyRootFilesystem }}
            {{- end }}
            {{- if .Values.securityContext.container.procMount }}
            procMount: {{ .Values.securityContext.container.procMount }}
            {{- end }}
            {{- if .Values.securityContext.container.capabilities }}
            capabilities:
              {{- if .Values.securityContext.container.capabilities.add }}
              add:
                {{- toYaml .Values.securityContext.container.capabilities.add | nindent 16 }}
              {{- end }}
              {{- if .Values.securityContext.container.capabilities.drop }}
              drop:
                {{- toYaml .Values.securityContext.container.capabilities.drop | nindent 16 }}
              {{- end }}
            {{- end }}
            {{- if .Values.securityContext.container.seccompProfile }}
            seccompProfile:
              {{- toYaml .Values.securityContext.container.seccompProfile | nindent 14 }}
            {{- end }}
            {{- if .Values.securityContext.container.seLinuxOptions }}
            seLinuxOptions:
              {{- toYaml .Values.securityContext.container.seLinuxOptions | nindent 14 }}
            {{- end }}
            {{- if .Values.securityContext.container.windowsOptions }}
            windowsOptions:
              {{- toYaml .Values.securityContext.container.windowsOptions | nindent 14 }}
            {{- end }}
          {{- end }}
          {{- if .Values.resources }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
          ports:
            - containerPort: {{ .Values.server.port | default 6006 }}
            - containerPort: 9090
            - containerPort: {{ .Values.server.grpcPort | default 4317 }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.server.port | default 6006 }}
            initialDelaySeconds: {{ .Values.healthChecks.livenessProbe.initialDelaySeconds | default 0 }}
            periodSeconds: {{ .Values.healthChecks.livenessProbe.periodSeconds | default 10 }}
            timeoutSeconds: {{ .Values.healthChecks.livenessProbe.timeoutSeconds | default 5 }}
            failureThreshold: {{ .Values.healthChecks.livenessProbe.failureThreshold | default 3 }}
            successThreshold: {{ .Values.healthChecks.livenessProbe.successThreshold | default 1 }}
          readinessProbe:
            httpGet:
              path: /readyz
              port: {{ .Values.server.port | default 6006 }}
            initialDelaySeconds: {{ .Values.healthChecks.readinessProbe.initialDelaySeconds | default 0 }}
            periodSeconds: {{ .Values.healthChecks.readinessProbe.periodSeconds | default 5 }}
            timeoutSeconds: {{ .Values.healthChecks.readinessProbe.timeoutSeconds | default 3 }}
            failureThreshold: {{ .Values.healthChecks.readinessProbe.failureThreshold | default 3 }}
            successThreshold: {{ .Values.healthChecks.readinessProbe.successThreshold | default 1 }}
          {{- if .Values.healthChecks.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.server.port | default 6006 }}
            initialDelaySeconds: {{ .Values.healthChecks.startupProbe.initialDelaySeconds | default 1 }}
            periodSeconds: {{ .Values.healthChecks.startupProbe.periodSeconds | default 1 }}
            timeoutSeconds: {{ .Values.healthChecks.startupProbe.timeoutSeconds | default 1 }}
            failureThreshold: {{ .Values.healthChecks.startupProbe.failureThreshold | default 30 }}
            successThreshold: {{ .Values.healthChecks.startupProbe.successThreshold | default 1 }}
          {{- end }}
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-configmap
          {{- if .Values.auth.secret }}
          env:
          {{- range $authSecrets := .Values.auth.secret }}
            - name: {{ $authSecrets.key }}
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.auth.name }}
                  key: {{ $authSecrets.key }}
          {{- end }}
          {{- end }}
          {{- if and .Values.securityContext.container.enabled .Values.securityContext.container.readOnlyRootFilesystem }}
          volumeMounts:
            - name: tmp-volume
              mountPath: /tmp
            - name: var-tmp-volume
              mountPath: /var/tmp
            - name: var-log-volume
              mountPath: /var/log
            - name: home-volume
              mountPath: /home/phoenix
            {{- if .Values.server.workingDir }}
            - name: working-dir-volume
              mountPath: {{ .Values.server.workingDir }}
            {{- end }}
          {{- end }}

      {{- if and .Values.securityContext.container.enabled .Values.securityContext.container.readOnlyRootFilesystem }}
      volumes:
        - name: tmp-volume
          emptyDir: {}
        - name: var-tmp-volume
          emptyDir: {}
        - name: var-log-volume
          emptyDir: {}
        - name: home-volume
          emptyDir: {}
        - name: working-dir-volume
          emptyDir: {}
      {{- end }}
