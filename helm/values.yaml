# Phoenix Helm Chart Values
# This file contains configuration values for deploying Phoenix via Helm.
# Each value corresponds to an environment variable described in https://arize.com/docs/phoenix/self-hosting/configuration.

# ADDONS
# - Ingress
# - Postgres

ingress:
  # -- Annotations to add to the ingress resource
  annotations: {}

  # -- Path prefix for the Phoenix API
  apiPath: "/"

  # -- Enable ingress controller for external access
  enabled: true

  # -- Hostname for ingress
  host: ""

  # -- Labels to add to the ingress resource
  labels: {}

  # -- Ingress path type (Prefix, Exact, or ImplementationSpecific)
  pathType: "Prefix"

  tls:
    # -- Enable TLS/HTTPS for ingress
    enabled: false


postgresql:
  # -- Enable postgres deployment, if you have your own postgres instance set this to false
  enabled: true

  auth:
      # -- Password for the "postgres" admin user. Ignored if `postgresql.auth.existingSecret` is provided
      postgresPassword: "postgres"
      # -- Name for a custom user to create
      username: ""
      # -- Password for the custom user to create. Ignored if `postgresql.auth.existingSecret` is provided
      password: ""
      # -- Name for a custom database to create
      database: "phoenix"
      # -- Name of existing secret to use for PostgreSQL credentials. `postgresql.auth.postgresPassword`, `postgresql.auth.password`, and `postgresql.auth.replicationPassword` will be ignored and picked up from this secret.
      existingSecret: ""
      secretKeys:
        # --  Name of key in existing secret to use for PostgreSQL credentials. Only used when `postgresql.auth.existingSecret` is set.
        adminPasswordKey: ""
        # -- Name of key in existing secret to use for PostgreSQL credentials. Only used when `postgresql.auth.existingSecret` is set.
        userPasswordKey: ""
        # -- Name of key in existing secret to use for PostgreSQL credentials. Only used when `postgresql.auth.existingSecret` is set.
        replicationPasswordKey: ""
  primary:
    persistence:
      # -- Enable persistent storage for PostgreSQL data
      enabled: true
      # -- Size of the persistent volume for PostgreSQL
      size: 10Gi
      # -- Kubernetes storage class for PostgreSQL volume
      storageClass: ""
    persistentVolumeClaimRetentionPolicy:
      # -- Set to true if you want the volume to persist helm uninstalls
      enabled: false
      # -- Volume retention behavior when the replica count of the StatefulSet is reduced
      whenScaled: Retain
      # -- Volume retention behavior that applies when the StatefulSet is deleted
      whenDeleted: Retain
    service:
      ports:
        # -- Port to run postgres service on
        postgresql: "5432"


## DEPRECATED
postgres:
  # -- Docker image for PostgreSQL (DEPRECATED for new postgresql.image)
  image: "postgres:14.5"

  persistence:
    # -- Enable persistent storage for PostgreSQL data (DEPRECATED for new postgresql.primary.persistence)
    enabled: true

    # -- Size of the persistent volume for PostgreSQL  (DEPRECATED for new postgresql.primary.persistence)
    size: "10Gi"

    # -- Kubernetes storage class for PostgreSQL volume (DEPRECATED for new postgresql.primary.persistence)
    storageClass: "standard"

  resources:
    limits:
      # -- CPU limit for PostgreSQL container (DEPRECATED for new postgresql)
      cpu: "500m"

      # -- Memory limit for PostgreSQL container (DEPRECATED for new postgresql)
      memory: "512Mi"

    requests:
      # -- CPU request for PostgreSQL container (DEPRECATED for new postgresql)
      cpu: "100m"

      # -- Memory request for PostgreSQL container (DEPRECATED for new postgresql)
      memory: "256Mi"

server:
  # -- Annotations to add to the Phoenix service
  annotations: {}

  # -- Enable Prometheus metrics endpoint on port 9090
  enablePrometheus: false

  # -- Port for OpenTelemetry gRPC collector (PHOENIX_GRPC_PORT)
  grpcPort: 4317

  # -- Host IP to bind Phoenix server (PHOENIX_HOST)
  host: "0.0.0.0"

  # -- Root path prefix for Phoenix UI and API (PHOENIX_HOST_ROOT_PATH)
  hostRootPath: ""

  # -- Labels to add to the Phoenix service
  labels: {}

  # -- Port for Phoenix web UI and HTTP API (PHOENIX_PORT)
  port: 6006

  # -- External root URL for Phoenix (PHOENIX_ROOT_URL)
  rootUrl: ""

  # -- The working directory for saving, loading, and exporting datasets (PHOENIX_WORKING_DIR)
  workingDir: ""

# Database configuration
# You can use either a full SQL database URL or individual Postgres settings
# If using SQLite, the database will be stored in the working directory
#
database:
  # -- Storage allocation in GiB for the database persistent volume
  allocatedStorageGiB: 10

  postgres:
    # -- Name of the PostgreSQL database (PHOENIX_POSTGRES_DB)
    db: "phoenix"

    # -- Postgres Host (currently points to provided postgres deployment, PHOENIX_POSTGRES_HOST)
    host: "phoenix-postgresql"

    # -- PostgreSQL password (should match auth.secret."PHOENIX_POSTGRES_PASSWORD", PHOENIX_POSTGRES_PASSWORD)
    password: "postgres"

    # -- Port number for PostgreSQL connections (PHOENIX_POSTGRES_PORT)
    port: 5432

    # -- PostgreSQL schema to use (PHOENIX_SQL_DATABASE_SCHEMA)
    schema: ""

    # -- PostgreSQL username (PHOENIX_POSTGRES_USER)
    user: "postgres"

  # -- Full database connection URL (overrides postgres settings if provided), recommend to disable postgres if using own
  url: ""

# Authentication and security
auth:
  # -- Duration in minutes before access tokens expire and require renewal (PHOENIX_ACCESS_TOKEN_EXPIRY_MINUTES)
  accessTokenExpiryMinutes: 60

  # -- List of allowed CORS origins for cross-origin requests to the Phoenix API (PHOENIX_ALLOWED_ORIGINS)
  allowedOrigins: []

  # -- List of trusted origins for CSRF protection to prevent cross-site request forgery attacks (PHOENIX_CSRF_TRUSTED_ORIGINS)
  csrfTrustedOrigins: []

  # -- Default password for the admin user on initial setup (PHOENIX_DEFAULT_ADMIN_INITIAL_PASSWORD)
  defaultAdminPassword: "admin"

  # -- Enable authentication and authorization for Phoenix (PHOENIX_ENABLE_AUTH)
  enableAuth: true

  # -- Name of the Kubernetes secret containing authentication credentials
  name: "phoenix-secret"

  # -- Duration in minutes before password reset tokens expire (PHOENIX_PASSWORD_RESET_TOKEN_EXPIRY_MINUTES)
  passwordResetTokenExpiryMinutes: 60

  # -- Duration in minutes before refresh tokens expire (PHOENIX_REFRESH_TOKEN_EXPIRY_MINUTES)
  refreshTokenExpiryMinutes: 43200

  secret:
    # -- Environment variable name for the main Phoenix secret key used for encryption
    - key: "PHOENIX_SECRET"
      # -- Autogenerated if empty
      value: ""

    # -- Environment variable name for the admin secret key
    - key: "PHOENIX_ADMIN_SECRET"
      # -- Autogenerated if empty
      value: ""

    # -- Environment variable name for the PostgreSQL password
    - key: "PHOENIX_POSTGRES_PASSWORD"
      # -- If using postgres in this chart, password must match with database.postgres.password
      value: "postgres"

    # -- Environment variable name for the SMTP password
    - key: "PHOENIX_SMTP_PASSWORD"
      # -- Autogenerated if empty
      value: ""

  # -- Enable secure cookies (should be true when using HTTPS)
  useSecureCookies: false

# SMTP (email) settings
smtp:
  # -- SMTP server hostname for sending emails (PHOENIX_SMTP_HOSTNAME)
  hostname: ""

  # -- Email address to use as sender for system emails (PHOENIX_SMTP_MAIL_FROM)
  mailFrom: "noreply@arize.com"

  # -- SMTP authentication password (PHOENIX_SMTP_PASSWORD)
  password: ""

  # -- SMTP server port (typically 587 for TLS, PHOENIX_SMTP_PORT)
  port: 587

  # -- SMTP authentication username (PHOENIX_SMTP_USERNAME_
  username: ""

  # -- Validate SMTP server TLS certificates (PHOENIX_SMTP_VALIDATE_CERTS)
  validateCerts: true

# TLS/SSL settings
# To enable TLS, set enabled to true and provide cert/key files
# For mTLS, also provide caFile and set verifyClient to true
tls:
  # -- Path to CA certificate file for TLS (PHOENIX_TLS_CA_FILE)
  caFile: ""

  # -- Path to TLS certificate file (PHOENIX_TLS_CERT_FILE)
  certFile: ""

  # -- Enable TLS for Phoenix server (PHOENIX_TLS_ENABLED)
  enabled: false

  # -- Enable TLS for gRPC endpoints (PHOENIX_TLS_ENABLED_FOR_GRPC)
  enabledForGrpc: false

  # -- Enable TLS for HTTP endpoints (PHOENIX_TLS_ENABLED_FOR_HTTP)
  enabledForHttp: false

  # -- Path to TLS private key file (PHOENIX_TLS_KEY_FILE)
  keyFile: ""

  # -- Password for encrypted TLS private key (PHOENIX_TLS_KEY_FILE_PASSWORD)
  keyFilePassword: ""

  # -- Enable client certificate verification for mutual TLS (PHOENIX_TLS_VERIFY_CLIENT)
  verifyClient: false

# Logging
logging:
  # -- Database logging level (debug, info, warning, error) PHOENIX_LOGGING_MODE
  dbLevel: "warning"

  # -- Application logging level (debug, info, warning, error) PHOENIX_LOGGING_LEVEL
  level: "info"

  # -- Enable logging of database migration operations (PHOENIX_LOG_MIGRATIONS)
  logMigrations: true

  # -- Logging mode configuration - PHOENIX_LOGGING_MODE (default|structured)
  mode: "default"

# Instrumentation
instrumentation:
  # -- OpenTelemetry collector gRPC endpoint for sending traces (PHOENIX_SERVER_INSTRUMENTATION_OTLP_TRACE_COLLECTOR_GRPC_ENDPOINT)
  otlpTraceCollectorGrpcEndpoint: ""

  # -- OpenTelemetry collector HTTP endpoint for sending traces (PHOENIX_SERVER_INSTRUMENTATION_OTLP_TRACE_COLLECTOR_HTTP_ENDPOINT)
  otlpTraceCollectorHttpEndpoint: ""

image:
  # -- Image pull policy for Phoenix container (Always, IfNotPresent, or Never)
  pullPolicy: "IfNotPresent"

  # -- Docker image repository for Phoenix
  repository: "arizephoenix/phoenix"

  # -- Docker image tag/version to deploy
  tag: version-10.6.1-nonroot
