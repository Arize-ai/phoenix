# Phoenix Helm Chart Values
# This file contains configuration values for deploying Phoenix via Helm.
# Each value corresponds to an environment variable described in https://arize.com/docs/phoenix/self-hosting/configuration.

# Replica count
# -- Number of Phoenix pod replicas
replicaCount: 1

# Deployment strategy
deployment:
  strategy:
    # -- Maximum number of pods that can be unavailable during update (can be absolute number or percentage)
    maxUnavailable: "25%"
    # -- Maximum number of pods that can be created above desired replica count during update
    maxSurge: "25%"

# ADDONS
# - Ingress
# - Postgres

ingress:
  # -- Annotations to add to the ingress resource
  annotations: {}

  # -- Path prefix for the Phoenix API
  apiPath: "/"

  # -- Enable ingress controller for external access
  enabled: true

  # -- Hostname for ingress
  host: ""

  # -- Labels to add to the ingress resource
  labels: {}

  # -- Ingress path type (Prefix, Exact, or ImplementationSpecific)
  pathType: "Prefix"

  tls:
    # -- Enable TLS/HTTPS for ingress
    enabled: false

postgresql:
  # -- Enable postgres deployment. Set to false if you have your own postgres instance (e.g., RDS, CloudSQL)
  # When disabled, you must configure database.url or database.postgres settings to point to your external database
  enabled: true

  auth:
    # -- Password for the "postgres" admin user. Ignored if `postgresql.auth.existingSecret` is provided
    postgresPassword: "postgres"
    # -- Name for a custom user to create
    username: ""
    # -- Password for the custom user to create. Ignored if `postgresql.auth.existingSecret` is provided
    password: ""
    # -- Name for a custom database to create
    database: "phoenix"
    # -- Name of existing secret to use for PostgreSQL credentials. `postgresql.auth.postgresPassword`, `postgresql.auth.password`, and `postgresql.auth.replicationPassword` will be ignored and picked up from this secret.
    existingSecret: ""
    secretKeys:
      # --  Name of key in existing secret to use for PostgreSQL credentials. Only used when `postgresql.auth.existingSecret` is set.
      adminPasswordKey: ""
      # -- Name of key in existing secret to use for PostgreSQL credentials. Only used when `postgresql.auth.existingSecret` is set.
      userPasswordKey: ""
      # -- Name of key in existing secret to use for PostgreSQL credentials. Only used when `postgresql.auth.existingSecret` is set.
      replicationPasswordKey: ""
  primary:
    persistence:
      # -- Enable persistent storage for PostgreSQL data
      enabled: true
      # -- Size of the persistent volume for PostgreSQL
      size: 10Gi
      # -- Kubernetes storage class for PostgreSQL volume
      storageClass: ""
    persistentVolumeClaimRetentionPolicy:
      # -- Set to true if you want the volume to persist helm uninstalls
      enabled: false
      # -- Volume retention behavior when the replica count of the StatefulSet is reduced
      whenScaled: Retain
      # -- Volume retention behavior that applies when the StatefulSet is deleted
      whenDeleted: Retain
    service:
      ports:
        # -- Port to run postgres service on
        postgresql: "5432"

## DEPRECATED
postgres:
  # -- Docker image for PostgreSQL (DEPRECATED for new postgresql.image)
  image: "postgres:14.5"

  persistence:
    # -- Enable persistent storage for PostgreSQL data (DEPRECATED for new postgresql.primary.persistence)
    enabled: true

    # -- Size of the persistent volume for PostgreSQL  (DEPRECATED for new postgresql.primary.persistence)
    size: "10Gi"

    # -- Kubernetes storage class for PostgreSQL volume (DEPRECATED for new postgresql.primary.persistence)
    storageClass: "standard"

  resources:
    limits:
      # -- CPU limit for PostgreSQL container (DEPRECATED for new postgresql)
      cpu: "500m"

      # -- Memory limit for PostgreSQL container (DEPRECATED for new postgresql)
      memory: "512Mi"

    requests:
      # -- CPU request for PostgreSQL container (DEPRECATED for new postgresql)
      cpu: "100m"

      # -- Memory request for PostgreSQL container (DEPRECATED for new postgresql)
      memory: "256Mi"

server:
  # -- Annotations to add to the Phoenix service
  annotations: {}

  # -- Enable Prometheus metrics endpoint on port 9090
  enablePrometheus: false

  # -- Port for OpenTelemetry gRPC collector (PHOENIX_GRPC_PORT)
  grpcPort: 4317

  # -- Host IP to bind Phoenix server (PHOENIX_HOST)
  host: "0.0.0.0"

  # -- Root path prefix for Phoenix UI and API (PHOENIX_HOST_ROOT_PATH)
  hostRootPath: ""

  # -- Labels to add to the Phoenix service
  labels: {}

  # -- Port for Phoenix web UI and HTTP API (PHOENIX_PORT)
  port: 6006

  # -- External root URL for Phoenix (PHOENIX_ROOT_URL)
  rootUrl: ""

  # -- The working directory for saving, loading, and exporting datasets (PHOENIX_WORKING_DIR)
  workingDir: ""

# Service configuration
service:
  # -- Service type for Phoenix service (ClusterIP, NodePort, LoadBalancer, or ExternalName)
  # Use ClusterIP for service mesh deployments (Istio, Linkerd, etc.)
  # Use NodePort for direct external access without ingress
  type: "NodePort"

  # -- Annotations to add to the Phoenix service (useful for service mesh configurations)
  annotations:
    {}
    # For Istio service mesh, you might want:
    # service.istio.io/canonical-name: phoenix
    # service.istio.io/canonical-revision: stable

  # -- Labels to add to the Phoenix service
  labels:
    {}
    # For service mesh deployments, you might want:
    # app: phoenix
    # version: stable

# Database configuration
# You can use either a full SQL database URL or individual Postgres settings
# If using SQLite, the database will be stored in the working directory
#
# For external databases (RDS, CloudSQL, etc.):
# 1. Set postgresql.enabled=false to disable the built-in PostgreSQL
# 2. Either set database.url with full connection string, or configure database.postgres settings
# 3. Ensure the external database is accessible from the cluster
#
database:
  # -- Storage allocation in GiB for the database persistent volume
  allocatedStorageGiB: 10

  postgres:
    # -- Name of the PostgreSQL database (PHOENIX_POSTGRES_DB)
    db: "phoenix"

    # -- Postgres Host (PHOENIX_POSTGRES_HOST)
    # Default points to the built-in PostgreSQL service when postgresql.enabled=true
    # Change this to your external database host when using RDS, CloudSQL, etc.
    host: "phoenix-postgresql"

    # -- PostgreSQL password (should match auth.secret."PHOENIX_POSTGRES_PASSWORD", PHOENIX_POSTGRES_PASSWORD)
    password: "postgres"

    # -- Port number for PostgreSQL connections (PHOENIX_POSTGRES_PORT)
    port: 5432

    # -- PostgreSQL schema to use (PHOENIX_SQL_DATABASE_SCHEMA)
    schema: ""

    # -- PostgreSQL username (PHOENIX_POSTGRES_USER)
    user: "postgres"

  # -- Full database connection URL (overrides postgres settings if provided)
  # Use this for external databases like RDS. Example:
  # url: "postgresql://username:password@your-rds-endpoint.region.rds.amazonaws.com:5432/phoenix"
  # When using this, ensure postgresql.enabled=false
  url: ""

# Authentication and security
auth:
  # -- Duration in minutes before access tokens expire and require renewal (PHOENIX_ACCESS_TOKEN_EXPIRY_MINUTES)
  accessTokenExpiryMinutes: 60

  # -- List of allowed CORS origins for cross-origin requests to the Phoenix API (PHOENIX_ALLOWED_ORIGINS)
  allowedOrigins: []

  # -- List of trusted origins for CSRF protection to prevent cross-site request forgery attacks (PHOENIX_CSRF_TRUSTED_ORIGINS)
  csrfTrustedOrigins: []

  # -- Default password for the admin user on initial setup (PHOENIX_DEFAULT_ADMIN_INITIAL_PASSWORD)
  defaultAdminPassword: "admin"

  # -- Enable authentication and authorization for Phoenix (PHOENIX_ENABLE_AUTH)
  enableAuth: true

  # -- Name of the Kubernetes secret containing authentication credentials
  name: "phoenix-secret"

  # -- Duration in minutes before password reset tokens expire (PHOENIX_PASSWORD_RESET_TOKEN_EXPIRY_MINUTES)
  passwordResetTokenExpiryMinutes: 60

  # -- Duration in minutes before refresh tokens expire (PHOENIX_REFRESH_TOKEN_EXPIRY_MINUTES)
  refreshTokenExpiryMinutes: 43200

  secret:
    # -- Environment variable name for the main Phoenix secret key used for encryption
    - key: "PHOENIX_SECRET"
      # -- Autogenerated if empty
      value: ""

    # -- Environment variable name for the admin secret key
    - key: "PHOENIX_ADMIN_SECRET"
      # -- Autogenerated if empty
      value: ""

    # -- Environment variable name for the PostgreSQL password
    - key: "PHOENIX_POSTGRES_PASSWORD"
      # -- If using postgres in this chart, password must match with database.postgres.password
      value: "postgres"

    # -- Environment variable name for the SMTP password
    - key: "PHOENIX_SMTP_PASSWORD"
      # -- Autogenerated if empty
      value: ""

    # -- Environment variable name for the default admin password
    - key: "PHOENIX_DEFAULT_ADMIN_INITIAL_PASSWORD"
      # -- Default password for the admin user on initial setup, uses defaultAdminPassword if empty
      value: ""

  # -- Enable secure cookies (should be true when using HTTPS)
  useSecureCookies: false

# SMTP (email) settings
smtp:
  # -- SMTP server hostname for sending emails (PHOENIX_SMTP_HOSTNAME)
  hostname: ""

  # -- Email address to use as sender for system emails (PHOENIX_SMTP_MAIL_FROM)
  mailFrom: "noreply@arize.com"

  # -- SMTP authentication password (PHOENIX_SMTP_PASSWORD)
  password: ""

  # -- SMTP server port (typically 587 for TLS, PHOENIX_SMTP_PORT)
  port: 587

  # -- SMTP authentication username (PHOENIX_SMTP_USERNAME)
  username: ""

  # -- Validate SMTP server TLS certificates (PHOENIX_SMTP_VALIDATE_CERTS)
  validateCerts: true

# TLS/SSL settings
# To enable TLS, set enabled to true and provide cert/key files
# For mTLS, also provide caFile and set verifyClient to true
tls:
  # -- Path to CA certificate file for TLS (PHOENIX_TLS_CA_FILE)
  caFile: ""

  # -- Path to TLS certificate file (PHOENIX_TLS_CERT_FILE)
  certFile: ""

  # -- Enable TLS for Phoenix server (PHOENIX_TLS_ENABLED)
  enabled: false

  # -- Enable TLS for gRPC endpoints (PHOENIX_TLS_ENABLED_FOR_GRPC)
  enabledForGrpc: false

  # -- Enable TLS for HTTP endpoints (PHOENIX_TLS_ENABLED_FOR_HTTP)
  enabledForHttp: false

  # -- Path to TLS private key file (PHOENIX_TLS_KEY_FILE)
  keyFile: ""

  # -- Password for encrypted TLS private key (PHOENIX_TLS_KEY_FILE_PASSWORD)
  keyFilePassword: ""

  # -- Enable client certificate verification for mutual TLS (PHOENIX_TLS_VERIFY_CLIENT)
  verifyClient: false

# Logging
logging:
  # -- Database logging level (debug, info, warning, error) PHOENIX_DB_LOGGING_LEVEL
  dbLevel: "warning"

  # -- Application logging level (debug, info, warning, error) PHOENIX_LOGGING_LEVEL
  level: "info"

  # -- Enable logging of database migration operations (PHOENIX_LOG_MIGRATIONS)
  logMigrations: true

  # -- Logging mode configuration - PHOENIX_LOGGING_MODE (default|structured)
  mode: "default"

# Instrumentation
instrumentation:
  # -- OpenTelemetry collector gRPC endpoint for sending traces (PHOENIX_SERVER_INSTRUMENTATION_OTLP_TRACE_COLLECTOR_GRPC_ENDPOINT)
  otlpTraceCollectorGrpcEndpoint: ""

  # -- OpenTelemetry collector HTTP endpoint for sending traces (PHOENIX_SERVER_INSTRUMENTATION_OTLP_TRACE_COLLECTOR_HTTP_ENDPOINT)
  otlpTraceCollectorHttpEndpoint: ""

image:
  # -- Image pull policy for Phoenix container (Always, IfNotPresent, or Never)
  pullPolicy: "IfNotPresent"

  # -- Docker image repository for Phoenix
  repository: "arizephoenix/phoenix"

  # -- Docker image tag/version to deploy
  tag: version-10.11.0-nonroot

# Resource configuration
resources:
  # -- Resource limits for Phoenix container
  limits:
    # -- CPU limit for Phoenix container
    cpu: "1000m"
    # -- Memory limit for Phoenix container
    memory: "2Gi"
  # -- Resource requests for Phoenix container
  requests:
    # -- CPU request for Phoenix container
    cpu: "500m"
    # -- Memory request for Phoenix container
    memory: "1Gi"

# Security context configuration
securityContext:
  # -- Pod-level security context settings
  pod:
    # -- Enable Pod security context
    enabled: true
    # -- Group ID for the Pod (fsGroup)
    fsGroup: 65532
    # -- Specifies how volume ownership and permissions are changed (Always, OnRootMismatch)
    fsGroupChangePolicy: "OnRootMismatch"
    # -- Run Pod as non-root user
    runAsNonRoot: true
    # -- User ID to run the Pod as
    runAsUser: 65532
    # -- Group ID to run the Pod as
    runAsGroup: 65532
    # -- SELinux context for the Pod
    seLinuxOptions: {}
    # -- Seccomp profile for the Pod
    seccompProfile:
      type: RuntimeDefault
    # -- Supplemental groups for the Pod
    supplementalGroups: []
    # -- Sysctls for the Pod
    sysctls: []
    # -- Windows-specific settings for the Pod
    windowsOptions: {}

  # -- Container-level security context settings
  container:
    # -- Enable Container security context
    enabled: true
    # -- Allow privilege escalation
    allowPrivilegeEscalation: false
    # -- Linux capabilities to add
    capabilities:
      add: []
      # -- Linux capabilities to drop
      drop:
        - ALL
    # -- Run container as privileged
    privileged: false
    # -- Proc mount type for the container
    procMount: "Default"
    # -- Read-only root filesystem
    readOnlyRootFilesystem: true
    # -- Run container as non-root user
    runAsNonRoot: true
    # -- User ID to run the container as
    runAsUser: 65532
    # -- Group ID to run the container as
    runAsGroup: 65532
    # -- SELinux context for the container
    seLinuxOptions: {}
    # -- Seccomp profile for the container
    seccompProfile:
      type: RuntimeDefault
    # -- Windows-specific settings for the container
    windowsOptions: {}
    
# -- ServiceAccount configuration
serviceAccount:
  # -- Create a ServiceAccount for Phoenix
  create: false
  # -- Name of the ServiceAccount to use. If not set and create is true, a name is generated using the release name. If not set and create is false, uses default ServiceAccount
  name: ""
  # -- Annotations to add to the ServiceAccount
  annotations: {}

# Health check configuration
healthChecks:
  livenessProbe:
    # -- Initial delay before liveness probe starts
    initialDelaySeconds: 0
    # -- How often to perform the liveness probe
    periodSeconds: 10
    # -- Timeout for liveness probe
    timeoutSeconds: 5
    # -- Number of failures before container is restarted
    failureThreshold: 3
    # -- Number of consecutive successes for the probe to be considered successful
    successThreshold: 1
  readinessProbe:
    # -- Initial delay before readiness probe starts
    initialDelaySeconds: 0
    # -- How often to perform the readiness probe
    periodSeconds: 5
    # -- Timeout for readiness probe
    timeoutSeconds: 3
    # -- Number of failures before pod is marked unready
    failureThreshold: 3
    # -- Number of consecutive successes for the probe to be considered successful
    successThreshold: 1
  startupProbe:
    # -- Enable startup probe
    enabled: true
    # -- Initial delay before startup probe starts
    initialDelaySeconds: 1
    # -- How often to perform the startup probe
    periodSeconds: 1
    # -- Timeout for startup probe
    timeoutSeconds: 1
    # -- Number of failures before container is considered failed to start
    failureThreshold: 30
    # -- Number of consecutive successes for the probe to be considered successful
    successThreshold: 1
