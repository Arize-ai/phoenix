// This file is auto-generated by @hey-api/openapi-ts

export const AnnotateSpansRequestBodySchema = {
  properties: {
    data: {
      items: {
        $ref: "#/components/schemas/SpanAnnotation",
      },
      type: "array",
      title: "Data",
    },
  },
  type: "object",
  required: ["data"],
  title: "AnnotateSpansRequestBody",
} as const;

export const AnnotateSpansResponseBodySchema = {
  properties: {
    data: {
      items: {
        $ref: "#/components/schemas/InsertedSpanAnnotation",
      },
      type: "array",
      title: "Data",
    },
  },
  type: "object",
  required: ["data"],
  title: "AnnotateSpansResponseBody",
} as const;

export const CreateExperimentRequestBodySchema = {
  properties: {
    name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Name",
      description:
        "Name of the experiment (if omitted, a random name will be generated)",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
      description: "An optional description of the experiment",
    },
    metadata: {
      anyOf: [
        {
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Metadata",
      description: "Metadata for the experiment",
    },
    version_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Version Id",
      description:
        "ID of the dataset version over which the experiment will be run (if omitted, the latest version will be used)",
    },
    repetitions: {
      type: "integer",
      title: "Repetitions",
      description:
        "Number of times the experiment should be repeated for each example",
      default: 1,
    },
  },
  type: "object",
  title: "CreateExperimentRequestBody",
  description: "Details of the experiment to be created",
} as const;

export const CreateExperimentResponseBodySchema = {
  properties: {
    data: {
      $ref: "#/components/schemas/Experiment",
    },
  },
  type: "object",
  required: ["data"],
  title: "CreateExperimentResponseBody",
} as const;

export const DatasetSchema = {
  properties: {
    id: {
      type: "string",
      title: "Id",
    },
    name: {
      type: "string",
      title: "Name",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    metadata: {
      type: "object",
      title: "Metadata",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    updated_at: {
      type: "string",
      format: "date-time",
      title: "Updated At",
    },
  },
  type: "object",
  required: [
    "id",
    "name",
    "description",
    "metadata",
    "created_at",
    "updated_at",
  ],
  title: "Dataset",
} as const;

export const DatasetExampleSchema = {
  properties: {
    id: {
      type: "string",
      title: "Id",
    },
    input: {
      type: "object",
      title: "Input",
    },
    output: {
      type: "object",
      title: "Output",
    },
    metadata: {
      type: "object",
      title: "Metadata",
    },
    updated_at: {
      type: "string",
      format: "date-time",
      title: "Updated At",
    },
  },
  type: "object",
  required: ["id", "input", "output", "metadata", "updated_at"],
  title: "DatasetExample",
} as const;

export const DatasetVersionSchema = {
  properties: {
    version_id: {
      type: "string",
      title: "Version Id",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    metadata: {
      type: "object",
      title: "Metadata",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
  },
  type: "object",
  required: ["version_id", "description", "metadata", "created_at"],
  title: "DatasetVersion",
} as const;

export const DatasetWithExampleCountSchema = {
  properties: {
    id: {
      type: "string",
      title: "Id",
    },
    name: {
      type: "string",
      title: "Name",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    metadata: {
      type: "object",
      title: "Metadata",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    updated_at: {
      type: "string",
      format: "date-time",
      title: "Updated At",
    },
    example_count: {
      type: "integer",
      title: "Example Count",
    },
  },
  type: "object",
  required: [
    "id",
    "name",
    "description",
    "metadata",
    "created_at",
    "updated_at",
    "example_count",
  ],
  title: "DatasetWithExampleCount",
} as const;

export const ExperimentSchema = {
  properties: {
    id: {
      type: "string",
      title: "Id",
      description: "The ID of the experiment",
    },
    dataset_id: {
      type: "string",
      title: "Dataset Id",
      description: "The ID of the dataset associated with the experiment",
    },
    dataset_version_id: {
      type: "string",
      title: "Dataset Version Id",
      description:
        "The ID of the dataset version associated with the experiment",
    },
    repetitions: {
      type: "integer",
      title: "Repetitions",
      description: "Number of times the experiment is repeated",
    },
    metadata: {
      type: "object",
      title: "Metadata",
      description: "Metadata of the experiment",
    },
    project_name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Project Name",
      description: "The name of the project associated with the experiment",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
      description: "The creation timestamp of the experiment",
    },
    updated_at: {
      type: "string",
      format: "date-time",
      title: "Updated At",
      description: "The last update timestamp of the experiment",
    },
  },
  type: "object",
  required: [
    "id",
    "dataset_id",
    "dataset_version_id",
    "repetitions",
    "metadata",
    "project_name",
    "created_at",
    "updated_at",
  ],
  title: "Experiment",
} as const;

export const GetDatasetResponseBodySchema = {
  properties: {
    data: {
      $ref: "#/components/schemas/DatasetWithExampleCount",
    },
  },
  type: "object",
  required: ["data"],
  title: "GetDatasetResponseBody",
} as const;

export const GetExperimentResponseBodySchema = {
  properties: {
    data: {
      $ref: "#/components/schemas/Experiment",
    },
  },
  type: "object",
  required: ["data"],
  title: "GetExperimentResponseBody",
} as const;

export const HTTPValidationErrorSchema = {
  properties: {
    detail: {
      items: {
        $ref: "#/components/schemas/ValidationError",
      },
      type: "array",
      title: "Detail",
    },
  },
  type: "object",
  title: "HTTPValidationError",
} as const;

export const InsertedSpanAnnotationSchema = {
  properties: {
    id: {
      type: "string",
      title: "Id",
      description: "The ID of the inserted span annotation",
    },
  },
  type: "object",
  required: ["id"],
  title: "InsertedSpanAnnotation",
} as const;

export const ListDatasetExamplesDataSchema = {
  properties: {
    dataset_id: {
      type: "string",
      title: "Dataset Id",
    },
    version_id: {
      type: "string",
      title: "Version Id",
    },
    examples: {
      items: {
        $ref: "#/components/schemas/DatasetExample",
      },
      type: "array",
      title: "Examples",
    },
  },
  type: "object",
  required: ["dataset_id", "version_id", "examples"],
  title: "ListDatasetExamplesData",
} as const;

export const ListDatasetExamplesResponseBodySchema = {
  properties: {
    data: {
      $ref: "#/components/schemas/ListDatasetExamplesData",
    },
  },
  type: "object",
  required: ["data"],
  title: "ListDatasetExamplesResponseBody",
} as const;

export const ListDatasetVersionsResponseBodySchema = {
  properties: {
    data: {
      items: {
        $ref: "#/components/schemas/DatasetVersion",
      },
      type: "array",
      title: "Data",
    },
    next_cursor: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Next Cursor",
    },
  },
  type: "object",
  required: ["data", "next_cursor"],
  title: "ListDatasetVersionsResponseBody",
} as const;

export const ListDatasetsResponseBodySchema = {
  properties: {
    data: {
      items: {
        $ref: "#/components/schemas/Dataset",
      },
      type: "array",
      title: "Data",
    },
    next_cursor: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Next Cursor",
    },
  },
  type: "object",
  required: ["data", "next_cursor"],
  title: "ListDatasetsResponseBody",
} as const;

export const ListExperimentsResponseBodySchema = {
  properties: {
    data: {
      items: {
        $ref: "#/components/schemas/Experiment",
      },
      type: "array",
      title: "Data",
    },
  },
  type: "object",
  required: ["data"],
  title: "ListExperimentsResponseBody",
} as const;

export const SpanAnnotationSchema = {
  properties: {
    span_id: {
      type: "string",
      title: "Span Id",
      description: "OpenTelemetry Span ID (hex format w/o 0x prefix)",
    },
    name: {
      type: "string",
      title: "Name",
      description: "The name of the annotation",
    },
    annotator_kind: {
      type: "string",
      enum: ["LLM", "HUMAN"],
      title: "Annotator Kind",
      description: "The kind of annotator used for the annotation",
    },
    result: {
      anyOf: [
        {
          $ref: "#/components/schemas/SpanAnnotationResult",
        },
        {
          type: "null",
        },
      ],
      description: "The result of the annotation",
    },
    metadata: {
      anyOf: [
        {
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Metadata",
      description: "Metadata for the annotation",
    },
  },
  type: "object",
  required: ["span_id", "name", "annotator_kind"],
  title: "SpanAnnotation",
} as const;

export const SpanAnnotationResultSchema = {
  properties: {
    label: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Label",
      description: "The label assigned by the annotation",
    },
    score: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Score",
      description: "The score assigned by the annotation",
    },
    explanation: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Explanation",
      description: "Explanation of the annotation result",
    },
  },
  type: "object",
  title: "SpanAnnotationResult",
} as const;

export const UploadDatasetDataSchema = {
  properties: {
    dataset_id: {
      type: "string",
      title: "Dataset Id",
    },
  },
  type: "object",
  required: ["dataset_id"],
  title: "UploadDatasetData",
} as const;

export const UploadDatasetResponseBodySchema = {
  properties: {
    data: {
      $ref: "#/components/schemas/UploadDatasetData",
    },
  },
  type: "object",
  required: ["data"],
  title: "UploadDatasetResponseBody",
} as const;

export const ValidationErrorSchema = {
  properties: {
    loc: {
      items: {
        anyOf: [
          {
            type: "string",
          },
          {
            type: "integer",
          },
        ],
      },
      type: "array",
      title: "Location",
    },
    msg: {
      type: "string",
      title: "Message",
    },
    type: {
      type: "string",
      title: "Error Type",
    },
  },
  type: "object",
  required: ["loc", "msg", "type"],
  title: "ValidationError",
} as const;
