// This file is auto-generated by @hey-api/openapi-ts

export type AnnotateSpansRequestBody = {
  data: Array<SpanAnnotation>;
};

export type AnnotateSpansResponseBody = {
  data: Array<InsertedSpanAnnotation>;
};

/**
 * Details of the experiment to be created
 */
export type CreateExperimentRequestBody = {
  /**
   * Name of the experiment (if omitted, a random name will be generated)
   */
  name?: string | null;
  /**
   * An optional description of the experiment
   */
  description?: string | null;
  /**
   * Metadata for the experiment
   */
  metadata?: {
    [key: string]: unknown;
  } | null;
  /**
   * ID of the dataset version over which the experiment will be run (if omitted, the latest version will be used)
   */
  version_id?: string | null;
  /**
   * Number of times the experiment should be repeated for each example
   */
  repetitions?: number;
};

export type CreateExperimentResponseBody = {
  data: Experiment;
};

export type Dataset = {
  id: string;
  name: string;
  description: string | null;
  metadata: {
    [key: string]: unknown;
  };
  created_at: string;
  updated_at: string;
};

export type DatasetExample = {
  id: string;
  input: {
    [key: string]: unknown;
  };
  output: {
    [key: string]: unknown;
  };
  metadata: {
    [key: string]: unknown;
  };
  updated_at: string;
};

export type DatasetVersion = {
  version_id: string;
  description: string | null;
  metadata: {
    [key: string]: unknown;
  };
  created_at: string;
};

export type DatasetWithExampleCount = {
  id: string;
  name: string;
  description: string | null;
  metadata: {
    [key: string]: unknown;
  };
  created_at: string;
  updated_at: string;
  example_count: number;
};

export type Experiment = {
  /**
   * The ID of the experiment
   */
  id: string;
  /**
   * The ID of the dataset associated with the experiment
   */
  dataset_id: string;
  /**
   * The ID of the dataset version associated with the experiment
   */
  dataset_version_id: string;
  /**
   * Number of times the experiment is repeated
   */
  repetitions: number;
  /**
   * Metadata of the experiment
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The name of the project associated with the experiment
   */
  project_name: string | null;
  /**
   * The creation timestamp of the experiment
   */
  created_at: string;
  /**
   * The last update timestamp of the experiment
   */
  updated_at: string;
};

export type GetDatasetResponseBody = {
  data: DatasetWithExampleCount;
};

export type GetExperimentResponseBody = {
  data: Experiment;
};

export type HTTPValidationError = {
  detail?: Array<ValidationError>;
};

export type InsertedSpanAnnotation = {
  /**
   * The ID of the inserted span annotation
   */
  id: string;
};

export type ListDatasetExamplesData = {
  dataset_id: string;
  version_id: string;
  examples: Array<DatasetExample>;
};

export type ListDatasetExamplesResponseBody = {
  data: ListDatasetExamplesData;
};

export type ListDatasetVersionsResponseBody = {
  data: Array<DatasetVersion>;
  next_cursor: string | null;
};

export type ListDatasetsResponseBody = {
  data: Array<Dataset>;
  next_cursor: string | null;
};

export type ListExperimentsResponseBody = {
  data: Array<Experiment>;
};

export type SpanAnnotation = {
  /**
   * OpenTelemetry Span ID (hex format w/o 0x prefix)
   */
  span_id: string;
  /**
   * The name of the annotation
   */
  name: string;
  /**
   * The kind of annotator used for the annotation
   */
  annotator_kind: "LLM" | "HUMAN";
  /**
   * The result of the annotation
   */
  result?: SpanAnnotationResult | null;
  /**
   * Metadata for the annotation
   */
  metadata?: {
    [key: string]: unknown;
  } | null;
};

/**
 * The kind of annotator used for the annotation
 */
export type annotator_kind = "LLM" | "HUMAN";

export type SpanAnnotationResult = {
  /**
   * The label assigned by the annotation
   */
  label?: string | null;
  /**
   * The score assigned by the annotation
   */
  score?: number | null;
  /**
   * Explanation of the annotation result
   */
  explanation?: string | null;
};

export type UploadDatasetData = {
  dataset_id: string;
};

export type UploadDatasetResponseBody = {
  data: UploadDatasetData;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type ListDatasetsData = {
  query?: {
    /**
     * Cursor for pagination
     */
    cursor?: string | null;
    /**
     * The max number of datasets to return at a time.
     */
    limit?: number;
    /**
     * An optional dataset name to filter by
     */
    name?: string | null;
  };
};

export type ListDatasetsResponse = ListDatasetsResponseBody;

export type ListDatasetsError = string;

export type DeleteDatasetByIdData = {
  path: {
    /**
     * The ID of the dataset to delete.
     */
    id: string;
  };
};

export type DeleteDatasetByIdResponse = void;

export type DeleteDatasetByIdError = string;

export type GetDatasetData = {
  path: {
    /**
     * The ID of the dataset
     */
    id: string;
  };
};

export type GetDatasetResponse = GetDatasetResponseBody;

export type GetDatasetError = string | HTTPValidationError;

export type ListDatasetVersionsByDatasetIdData = {
  path: {
    /**
     * The ID of the dataset
     */
    id: string;
  };
  query?: {
    /**
     * Cursor for pagination
     */
    cursor?: string | null;
    /**
     * The max number of dataset versions to return at a time
     */
    limit?: number;
  };
};

export type ListDatasetVersionsByDatasetIdResponse =
  ListDatasetVersionsResponseBody;

export type ListDatasetVersionsByDatasetIdError = string;

export type UploadDatasetData2 = {
  body?: {
    action?: "create" | "append";
    name: string;
    description?: string;
    inputs: Array<{
      [key: string]: unknown;
    }>;
    outputs?: Array<{
      [key: string]: unknown;
    }>;
    metadata?: Array<{
      [key: string]: unknown;
    }>;
  };
  query?: {
    /**
     * If true, fulfill request synchronously and return JSON containing dataset_id.
     */
    sync?: boolean;
  };
};

export type UploadDatasetResponse = UploadDatasetResponseBody | null;

export type UploadDatasetError = string;

export type GetDatasetExamplesData = {
  path: {
    /**
     * The ID of the dataset
     */
    id: string;
  };
  query?: {
    /**
     * The ID of the dataset version (if omitted, returns data from the latest version)
     */
    version_id?: string | null;
  };
};

export type GetDatasetExamplesResponse = ListDatasetExamplesResponseBody;

export type GetDatasetExamplesError = string | HTTPValidationError;

export type GetDatasetCsvData = {
  path: {
    /**
     * The ID of the dataset
     */
    id: string;
  };
  query?: {
    /**
     * The ID of the dataset version (if omitted, returns data from the latest version)
     */
    version_id?: string | null;
  };
};

export type GetDatasetCsvResponse = string;

export type GetDatasetCsvError = string;

export type GetDatasetJsonlOpenAiFineTuningData = {
  path: {
    /**
     * The ID of the dataset
     */
    id: string;
  };
  query?: {
    /**
     * The ID of the dataset version (if omitted, returns data from the latest version)
     */
    version_id?: string | null;
  };
};

export type GetDatasetJsonlOpenAiFineTuningResponse = string;

export type GetDatasetJsonlOpenAiFineTuningError = string;

export type GetDatasetJsonlOpenAiEvalsData = {
  path: {
    /**
     * The ID of the dataset
     */
    id: string;
  };
  query?: {
    /**
     * The ID of the dataset version (if omitted, returns data from the latest version)
     */
    version_id?: string | null;
  };
};

export type GetDatasetJsonlOpenAiEvalsResponse = string;

export type GetDatasetJsonlOpenAiEvalsError = string;

export type CreateExperimentData = {
  body: CreateExperimentRequestBody;
  path: {
    dataset_id: string;
  };
};

export type CreateExperimentResponse = CreateExperimentResponseBody;

export type CreateExperimentError = string | HTTPValidationError;

export type ListExperimentsData = {
  path: {
    dataset_id: string;
  };
};

export type ListExperimentsResponse = ListExperimentsResponseBody;

export type ListExperimentsError = string | HTTPValidationError;

export type GetExperimentData = {
  path: {
    experiment_id: string;
  };
};

export type GetExperimentResponse = GetExperimentResponseBody;

export type GetExperimentError = string | HTTPValidationError;

export type AnnotateSpansData = {
  body: AnnotateSpansRequestBody;
  query?: {
    /**
     * If true, fulfill request synchronously.
     */
    sync?: boolean;
  };
};

export type AnnotateSpansResponse = AnnotateSpansResponseBody;

export type AnnotateSpansError = string | HTTPValidationError;

export type $OpenApiTs = {
  "/v1/datasets": {
    get: {
      req: ListDatasetsData;
      res: {
        /**
         * Successful Response
         */
        "200": ListDatasetsResponseBody;
        /**
         * Forbidden
         */
        "403": string;
        /**
         * Unprocessable Entity
         */
        "422": string;
      };
    };
  };
  "/v1/datasets/{id}": {
    delete: {
      req: DeleteDatasetByIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Forbidden
         */
        "403": string;
        /**
         * Dataset not found
         */
        "404": string;
        /**
         * Invalid dataset ID
         */
        "422": string;
      };
    };
    get: {
      req: GetDatasetData;
      res: {
        /**
         * Successful Response
         */
        "200": GetDatasetResponseBody;
        /**
         * Forbidden
         */
        "403": string;
        /**
         * Not Found
         */
        "404": string;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/v1/datasets/{id}/versions": {
    get: {
      req: ListDatasetVersionsByDatasetIdData;
      res: {
        /**
         * Successful Response
         */
        "200": ListDatasetVersionsResponseBody;
        /**
         * Forbidden
         */
        "403": string;
        /**
         * Unprocessable Entity
         */
        "422": string;
      };
    };
  };
  "/v1/datasets/upload": {
    post: {
      req: UploadDatasetData2;
      res: {
        /**
         * Successful Response
         */
        "200": UploadDatasetResponseBody | null;
        /**
         * Forbidden
         */
        "403": string;
        /**
         * Dataset of the same name already exists
         */
        "409": string;
        /**
         * Invalid request body
         */
        "422": string;
      };
    };
  };
  "/v1/datasets/{id}/examples": {
    get: {
      req: GetDatasetExamplesData;
      res: {
        /**
         * Successful Response
         */
        "200": ListDatasetExamplesResponseBody;
        /**
         * Forbidden
         */
        "403": string;
        /**
         * Not Found
         */
        "404": string;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/v1/datasets/{id}/csv": {
    get: {
      req: GetDatasetCsvData;
      res: {
        /**
         * Successful Response
         */
        "200": string;
        /**
         * Forbidden
         */
        "403": string;
        /**
         * Unprocessable Entity
         */
        "422": string;
      };
    };
  };
  "/v1/datasets/{id}/jsonl/openai_ft": {
    get: {
      req: GetDatasetJsonlOpenAiFineTuningData;
      res: {
        /**
         * Successful Response
         */
        "200": string;
        /**
         * Forbidden
         */
        "403": string;
        /**
         * Invalid dataset or version ID
         */
        "422": string;
      };
    };
  };
  "/v1/datasets/{id}/jsonl/openai_evals": {
    get: {
      req: GetDatasetJsonlOpenAiEvalsData;
      res: {
        /**
         * Successful Response
         */
        "200": string;
        /**
         * Forbidden
         */
        "403": string;
        /**
         * Invalid dataset or version ID
         */
        "422": string;
      };
    };
  };
  "/v1/datasets/{dataset_id}/experiments": {
    post: {
      req: CreateExperimentData;
      res: {
        /**
         * Experiment retrieved successfully
         */
        "200": CreateExperimentResponseBody;
        /**
         * Forbidden
         */
        "403": string;
        /**
         * Dataset or DatasetVersion not found
         */
        "404": string;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    get: {
      req: ListExperimentsData;
      res: {
        /**
         * Experiments retrieved successfully
         */
        "200": ListExperimentsResponseBody;
        /**
         * Forbidden
         */
        "403": string;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/v1/experiments/{experiment_id}": {
    get: {
      req: GetExperimentData;
      res: {
        /**
         * Experiment retrieved successfully
         */
        "200": GetExperimentResponseBody;
        /**
         * Forbidden
         */
        "403": string;
        /**
         * Experiment not found
         */
        "404": string;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/v1/span_annotations": {
    post: {
      req: AnnotateSpansData;
      res: {
        /**
         * Span annotations inserted successfully
         */
        "200": AnnotateSpansResponseBody;
        /**
         * Forbidden
         */
        "403": string;
        /**
         * Span not found
         */
        "404": string;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
};
