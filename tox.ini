[tox]
isolated_build = True
skipsdist = True

[testenv]
package = wheel
wheel_build_env = .pkg

[testenv:phoenix_client]
description = Run tests for the arize-phoenix-client package
changedir = packages/phoenix-client/
deps =
  -r requirements/packages/phoenix-client.txt
commands_pre = uv pip install --strict --reinstall-package arize-phoenix-client .
commands =
    uv pip list -v
    mypy .

[testenv:phoenix_client_canary_tests_sdk_openai]
description = Run phoenix-client canary tests for third-party SDK: openai
changedir = packages/phoenix-client/tests/canary/sdk/openai
commands_pre =
  uv pip install --strict -U \
    --reinstall-package arize-phoenix-client {toxinidir}/packages/phoenix-client
  uv pip uninstall -r {toxinidir}/requirements/canary/sdk/openai.txt
  uv pip list -v
commands =
  python -c "import phoenix.client.helpers.sdk.openai.chat"
  uv pip install --strict -U \
    -r {toxinidir}/requirements/ci.txt \
    -r {toxinidir}/requirements/canary/sdk/openai.txt
  uv pip list -v
  mypy --follow-untyped-imports {toxinidir}/packages/phoenix-client/src/phoenix/client/helpers/sdk/openai/
  mypy --follow-untyped-imports .
  pytest --disable-socket {posargs} .

[testenv:phoenix_client_canary_tests_sdk_anthropic]
description = Run phoenix-client canary tests for third-party SDK: anthropic
changedir = packages/phoenix-client/tests/canary/sdk/anthropic
commands_pre =
  uv pip install --strict -U \
    --reinstall-package arize-phoenix-client {toxinidir}/packages/phoenix-client
  uv pip uninstall -r {toxinidir}/requirements/canary/sdk/anthropic.txt
  uv pip list -v
commands =
  python -c "import phoenix.client.helpers.sdk.anthropic.messages"
  uv pip install --strict -U \
    -r {toxinidir}/requirements/ci.txt \
    -r {toxinidir}/requirements/canary/sdk/anthropic.txt
  uv pip list -v
  mypy --follow-untyped-imports {toxinidir}/packages/phoenix-client/src/phoenix/client/helpers/sdk/anthropic/
  mypy --follow-untyped-imports .
  pytest --disable-socket {posargs} .

[testenv:phoenix_evals]
description = Run tests for the arize-phoenix-evals package
changedir = packages/phoenix-evals/
deps =
  -r requirements/ci.txt
commands_pre = uv pip install --strict --reinstall-package arize-phoenix-evals .[test]
commands =
  uv pip list -v
  mypy .
  pytest {posargs} .

[testenv:phoenix_otel]
description = Run tests for the arize-phoenix-otel package
changedir = packages/phoenix-otel/
deps =
  -r requirements/ci.txt
commands_pre = uv pip install --strict --reinstall-package arize-phoenix-otel .[test]
commands =
  uv pip list -v
  mypy .
  ; pytest -ra -x {posargs:.}

[testenv:type_check_integration_tests]
description = Run type checking with mypy on integration tests
changedir = tests/integration
deps =
  -r requirements/integration-tests.txt
commands_pre =
  uv pip install --strict --reinstall-package arize-phoenix {toxinidir}
commands =
  uv pip list -v
  mypy {posargs} .

[testenv:integration_tests]
description = Run integration tests
pass_env =
  CI_TEST_DB_BACKEND
changedir = tests/integration
deps =
  -r requirements/integration-tests.txt
commands_pre =
  uv pip install --strict --reinstall-package arize-phoenix {toxinidir}
commands =
  uv pip list -v
  pytest {posargs} .

[testenv:type_check_unit_tests]
description = Run type checking with mypy on unit tests
changedir = tests/
deps =
  -r requirements/unit-tests.txt
commands_pre =
  uv pip install --strict --reinstall-package arize-phoenix {toxinidir}
commands =
  uv pip list -v
  mypy {posargs} unit/

[testenv:unit_tests]
description = Run unit tests
changedir = tests
deps =
  -r requirements/unit-tests.txt
commands_pre =
  uv pip install --strict --reinstall-package arize-phoenix {toxinidir}
commands =
  uv pip list -v
  pytest {posargs} unit/

[testenv:unit_tests_local_evals]
description = Run unit tests with phoenix-evals installed from local source
changedir = tests
deps =
  -r requirements/unit-tests.txt
commands_pre =
  uv pip install --strict --reinstall-package arize-phoenix --reinstall-package arize-phoenix-evals ../. arize-phoenix-evals@../packages/phoenix-evals
commands =
  uv pip list -v
  pytest {posargs} unit/

[testenv:type_check]
description = Run type checking with mypy on src/phoenix
deps =
  -r requirements/type-check.txt
commands_pre =
  uv pip install --strict --reinstall-package arize-phoenix .
commands =
  uv pip list -v
  mypy {posargs} src/phoenix/

[testenv:clean_jupyter_notebooks]
description = Clear output and metadata from Jupyter notebooks
deps =
  -r requirements/clean-jupyter-notebooks.txt
commands =
  uv pip list -v
  jupyter nbconvert --ClearOutputPreprocessor.enabled=True --ClearMetadataPreprocessor.enabled=True --inplace {posargs}

[testenv:build_graphql_schema]
description = Export GraphQL schema to a file (Python 3.9)
basepython = python3.9
changedir = app
deps =
  -r requirements/build-graphql-schema.txt
commands_pre =
  uv pip install --strict --reinstall-package arize-phoenix {toxinidir}
commands =
  uv pip list -v
  strawberry export-schema phoenix.server.api.schema:_EXPORTED_GRAPHQL_SCHEMA -o schema.graphql

[testenv:build_openapi_schema]
description = Export OpenAPI schema to a file (Python 3.9)
basepython = python3.9
changedir = schemas
commands_pre =
  uv pip install --strict --reinstall-package arize-phoenix {toxinidir}
commands =
  uv pip list -v
  python -m phoenix.server.api.openapi.main -o openapi.json

[testenv:compile_protobuf]
description = Compile protobuf files (Python 3.9)
basepython = python3.9
deps =
  -r requirements/compile-protobuf.txt
commands =
  uv pip list -v
  python -m grpc_tools.protoc -I src/phoenix/proto --python_out=src/phoenix --mypy_out=src/phoenix src/phoenix/proto/trace/v1/evaluation.proto

[testenv:add_symlinks]
description = Add symlinks to packages (for editable install)
changedir = src/phoenix
allowlist_externals =
  sh
commands =
  sh -c '[ -e client ] || ln -s ../../packages/phoenix-client/src/phoenix/client client'
  sh -c '[ -e evals ] || ln -s ../../packages/phoenix-evals/src/phoenix/evals evals'
  sh -c '[ -e otel ] || ln -s ../../packages/phoenix-otel/src/phoenix/otel otel'

[testenv:remove_symlinks]
description = Remove symlinks to packages
changedir = src/phoenix
allowlist_externals =
  unlink
commands =
  unlink client
  unlink evals
  unlink otel

[testenv:phoenix_main]
description = Run Phoenix server
pass_env=
  PHOENIX_PORT
  PHOENIX_GRPC_PORT
  PHOENIX_HOST_ROOT_PATH
  PHOENIX_SQL_DATABASE_URL
  PHOENIX_SQL_DATABASE_SCHEMA
  PHOENIX_ENABLE_AUTH
  PHOENIX_SECRET
  PHOENIX_OAUTH2_GOOGLE_CLIENT_ID
  PHOENIX_OAUTH2_GOOGLE_CLIENT_SECRET
  PHOENIX_OAUTH2_GOOGLE_OIDC_CONFIG_URL
  PHOENIX_OAUTH_GITHUB_CLIENT_ID
  PHOENIX_OAUTH_GITHUB_CLIENT_SECRET
  PHOENIX_OAUTH2_AUTH0_CLIENT_ID
  PHOENIX_OAUTH2_AUTH0_CLIENT_SECRET
  PHOENIX_OAUTH2_AUTH0_OIDC_CONFIG_URL
  PHOENIX_OAUTH2_AZURE_AD_OIDC_CONFIG_URL
  PHOENIX_OAUTH2_AZURE_AD_CLIENT_ID
  PHOENIX_OAUTH2_AZURE_AD_CLIENT_SECRET
  PHOENIX_OAUTH2_AWS_COGNITO_CLIENT_ID
  PHOENIX_OAUTH2_AWS_COGNITO_CLIENT_SECRET
  PHOENIX_OAUTH2_AWS_COGNITO_OIDC_CONFIG_URL
  PHOENIX_SMTP_HOSTNAME
  PHOENIX_SMTP_PORT
  PHOENIX_SMTP_USERNAME
  PHOENIX_SMTP_PASSWORD
commands_pre =
  uv tool install -U --force arize-phoenix@. \
    --reinstall-package arize-phoenix \
    --with-requirements requirements/dev.txt \
    --compile-bytecode
commands =
  uv tool run arize-phoenix {posargs:serve}

[testenv:ruff]
description = Run ruff for formatting and linting
commands_pre =
  uv tool install ruff@0.8.6
commands =
  uv tool run ruff format
  uv tool run ruff check --fix

[testenv:openapi_codegen_python_client]
description = Generate Python client Data Models from OpenAPI schema
changedir = packages/phoenix-client/src/phoenix/client/__generated__/
commands =
  uv pip list -v
  python -c "import pathlib; pathlib.Path('v1/__init__.py').unlink(missing_ok=True)"
  uv tool run --from datamodel-code-generator datamodel-codegen \
    --input {toxinidir}/schemas/openapi.json \
    --input-file-type openapi \
    --output v1/__init__.py \
    --output-model-type pydantic_v2.BaseModel \
    --collapse-root-models \
    --enable-faux-immutability \
    --enum-field-as-literal all \
    --keyword-only \
    --target-python-version 3.9 \
    --use-annotated \
    --use-default-kwarg \
    --use-double-quotes \
    --use-generic-container-types \
    --wrap-string-literal \
    --disable-timestamp
  python -c "import re; file = 'v1/__init__.py'; lines = [re.sub(r'\\bSequence]', 'Sequence[Any]]', line) for line in open(file).readlines()]; open(file, 'w').writelines(lines)"
  python {toxinidir}/packages/phoenix-client/scripts/codegen/transform.py v1/__init__.py
  uv pip install --strict --reinstall-package arize-phoenix-client {toxinidir}/packages/phoenix-client
  uv pip list -v
  python -c "import phoenix.client.__generated__.v1"

[testenv:canary_tests_sdk_openai]
description = Run canary tests for third-party SDK: openai
changedir = tests/canary/sdk/openai
commands_pre =
  uv pip install --strict -U \
    --reinstall-package arize-phoenix {toxinidir} \
    -r {toxinidir}/requirements/ci.txt \
    -r {toxinidir}/requirements/canary/sdk/openai.txt
  uv pip list -v
  mypy .
  pytest {posargs} .

[testenv:canary_tests_sdk_anthropic]
description = Run canary tests for third-party SDK: anthropic
changedir = tests/canary/sdk/anthropic
commands_pre =
  uv pip install --strict -U \
    --reinstall-package arize-phoenix {toxinidir} \
    -r {toxinidir}/requirements/ci.txt \
    -r {toxinidir}/requirements/canary/sdk/anthropic.txt
  uv pip list -v
  mypy .
  pytest {posargs} .

[testenv:canary_tests_sdk_vertexai]
description = Run canary tests for third-party SDK: vertexai
changedir = tests/canary/sdk/vertexai
commands_pre =
  uv pip install --strict -U \
    --reinstall-package arize-phoenix {toxinidir} \
    -r {toxinidir}/requirements/ci.txt \
    -r {toxinidir}/requirements/canary/sdk/vertexai.txt
  uv pip list -v
  mypy .
  pytest {posargs} .
