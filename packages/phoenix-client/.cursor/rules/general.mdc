---
description: 
globs: 
alwaysApply: true
---
# General Client Design Guidelines

## Dependancies

The client should be as light-weight as possible as it is meant to be integrated into applications directly with no impact on the runtime. This means it should never depend on the core `phoenix` package and should only depend on things under the `phoenix.client` sub-module. The client must never depend on modules that are related to a server such as `starlette`, `sqlalchamy`, `pg` and so on. For libraries like `pandas`, implement lazy importing (importing within the specific function that requires it) rather than importing at the top-level.

## Syntax

All methods that interact with the server shoud be namespaced via `projects`, `prompts` and so on.

All arguments to the methods MUST use `kwargs` so as to make the signature as self evident as possible.

Do not do:

```python
client.prompts.get("prompt_version_id")
```

Prefer:

```python
client.prompts.get(prompt_version_id="prompt_version_id")
```

Methods should be prefixed with an action:

- `get` - gets the entity. Corrolates to HTTP `GET` a specific entity. E.x. `/projects/1`
- `create` - makes a new entity. Corrolates to HTTP `POST`
- `list` - get a paginated list of an entity. E.g. `GET` a list `/projects`
- `add` - attach an entity to another. E.x. `add_annotation` would be used to attach an annotation to a `span` or `trace`
- `delete` - permanently delete an entity

In addition things can be sent to the platform in bulk.

- `log` - associates a list of entities to something. E.x. `log_annotations` will send a list of annotations to a particular target such as a `span` or a `project`

## Pandas

The client should make affordances to push and pull data from the phoenix server via `pandas` DataFrames. For all bulk operations, the method should be postfixed with `dataframe` so as to make it clear that the input and output is a dataframe.

For example:

```python
client.log_annotations_dataframe(dataframe=dataframe)
df = client.get_spans_dataframe(project_name="default")
```

## Transport

For all IO to the phoenix server, JSON or JSONL over HTTP should be preferred. This is so that clients in other languages can be created (E.g. `TypeScript`), LLMs can easily interpret the data (fine-tunining), and so that non homogenious data can be sent over the wire (e.x. `metatadata` dictionaries). 

In the case that a different format is needed (e.x. `DataFrame` or `CSV`), the client should perform the translation (e.g. be a fat client) unless there is a more specific endpoint that supports that MIME type.

For example:

```python
client.log_annotations(annotations=annotations)

# Syntactic surgar to log annotations as a dataframe 
# Annotations are still sent over the wire as JSON
client.log_annotations_dataframe(dataframe=df)
```
